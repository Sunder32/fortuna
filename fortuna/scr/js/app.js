import { HellWheel3D } from './wheel3d.js';
import { UI } from './ui.js';
import { audioBus } from './audio.js';
import { debounce } from './utils/debounce.js';
import { confetti } from './utils/confetti.js';

const DEFAULT_LABELS = ['–í–∞—Ä–∏–∞–Ω—Ç 1', '–í–∞—Ä–∏–∞–Ω—Ç 2', '–í–∞—Ä–∏–∞–Ω—Ç 3', '–í–∞—Ä–∏–∞–Ω—Ç 4', 
                        '–í–∞—Ä–∏–∞–Ω—Ç 5', '–í–∞—Ä–∏–∞–Ω—Ç 6', '–í–∞—Ä–∏–∞–Ω—Ç 7', '–í–∞—Ä–∏–∞–Ω—Ç 8'];

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const mount = document.getElementById('threeMount');
const resultEl = document.getElementById('resultValue');
const spinBtn = document.getElementById('spinBtn');
const listEl = document.getElementById('sectorsList');
const inputEl = document.getElementById('sectorInput');
const addBtn = document.getElementById('addBtn');
const clearBtn = document.getElementById('clearBtn');
const cbClicks = document.getElementById('clickSoundChk');
const cbAmbient = document.getElementById('bgSoundChk');
const cbFate = document.getElementById('fateChk');
const cbElimination = document.getElementById('eliminationChk');
const cbChaos = document.getElementById('chaosChk');
const sectorsCountEl = document.getElementById('sectorsCount');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ
audioBus.initOnFirstGesture();

// üî• –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–ª–∏–∫–µ ANYWHERE
let audioUnlocked = false;
const unlockAudio = async () => {
  if (audioUnlocked) return;
  audioUnlocked = true;
  
  console.log('üéµ –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ...');
  await audioBus._unlock();
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
  if (audioBus.isUnlocked()) {
    console.log('‚úÖ –ê—É–¥–∏–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!');
  }
};

// –°–ª—É—à–∞–µ–º –ø–µ—Ä–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –≤—Å—ë–º –¥–æ–∫—É–º–µ–Ω—Ç–µ
['click', 'touchstart', 'keydown'].forEach(eventType => {
  document.addEventListener(eventType, unlockAudio, { once: true, passive: true });
});

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
const saved = (() => {
  try { 
    const data = localStorage.getItem('hellwheel.labels');
    return data ? JSON.parse(data) : [];
  } catch { 
    return []; 
  }
})();

const initialLabels = saved.length ? saved : DEFAULT_LABELS;

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–µ—Å–∞
const wheel = new HellWheel3D(mount, {
  audioBus: audioBus, // üîä –ü–µ—Ä–µ–¥–∞—ë–º –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º—É
  onHit: (strength) => {
    // üîî –ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π –∑–≤–æ–Ω –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ –∫–ª–∏–∫–∞
    audioBus.playMetalCling(strength);
  },
  onResult: (label) => {
    resultEl.textContent = label || '‚Äî';
    ui.setSpinning(false);
    
    if (label) {
      // üé∫ –§–∞–Ω—Ñ–∞—Ä—ã –ø–æ–±–µ–¥—ã
      setTimeout(() => {
        audioBus.playVictoryFanfare();
        confetti.launch(150);
      }, 300);
      
      // üó£Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
      setTimeout(() => {
        audioBus.speak(`–°—É–¥—å–±–∞ –≤—ã–±—Ä–∞–ª–∞: ${label}`);
      }, 1000);
    }
  }
});

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –º–µ—Ç–∫–∏
wheel.setLabels(initialLabels);

// –°–æ–∑–¥–∞–Ω–∏–µ UI  
const ui = new UI({
  listEl, inputEl, addBtn, clearBtn, spinBtn, sectorsCountEl,
  checkboxes: { clicks: cbClicks, ambient: cbAmbient, fate: cbFate },
  onChange: (arr) => {
    if (wheel.isSpinning) return;
    
    wheel.setLabels(arr);
    localStorage.setItem('hellwheel.labels', JSON.stringify(arr));
    
    if (!arr || arr.length === 0) {
      resultEl.textContent = '‚Äî';
    }
  }
});

// –ü–µ—Ä–µ–¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ ui –≤ –∫–æ–ª–µ—Å–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ–∫–±–æ–∫—Å–æ–º fate
wheel.setUI(ui);

// üîÑ –ü–µ—Ä–µ–¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–ª–µ—Å–æ –≤ UI –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
ui.setWheel(wheel);

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI
ui.setInitial(initialLabels);

// üåÄ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–µ–∫–±–æ–∫—Å–∞ —Ä–µ–∂–∏–º–∞ —Ö–∞–æ—Å–∞
cbChaos?.addEventListener('change', (e) => {
  if (e.target.checked) {
    // –í–∫–ª—é—á–∞–µ–º –∑–≤—É–∫ —Ö–∞–æ—Å–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞
    audioBus.startChaosSound();
  } else {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤—É–∫ —Ö–∞–æ—Å–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏
    audioBus.stopChaosSound();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—Ä–∞—â–µ–Ω–∏—è
spinBtn?.addEventListener('click', (e) => {
  e.preventDefault();
  if (wheel.isSpinning || ui.items.length < 2) return;

  ui.setSpinning(true);
  
  // üåÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ö–∞–æ—Å–∞
  const isChaosMode = cbChaos?.checked || false;
  
  // üåÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∑–≤—É–∫ —Ö–∞–æ—Å–∞ –ø—Ä–∏ –≤—Ä–∞—â–µ–Ω–∏–∏, –µ—Å–ª–∏ —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω
  if (isChaosMode) {
    audioBus.startChaosSound();
  }
  
  wheel.spin(1, isChaosMode);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã - –≤—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–±–µ–ª
window.addEventListener('keydown', (e) => {
  const activeTag = document.activeElement?.tagName;
  const isInputFocused = ['INPUT', 'TEXTAREA'].includes(activeTag);
  
  // ‚úÖ –ü–†–û–ë–ï–õ - –≤—Ä–∞—â–µ–Ω–∏–µ
  if (e.code === 'Space' && !isInputFocused) {
    if (!wheel.isSpinning && ui.items.length >= 2) {
      e.preventDefault();
      ui.setSpinning(true);
      
      // üåÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ö–∞–æ—Å–∞
      const isChaosMode = cbChaos?.checked || false;
      
      // üåÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∑–≤—É–∫ —Ö–∞–æ—Å–∞ –ø—Ä–∏ –≤—Ä–∞—â–µ–Ω–∏–∏, –µ—Å–ª–∏ —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω
      if (isChaosMode) {
        audioBus.startChaosSound();
      }
      
      wheel.spin(1, isChaosMode);
    }
  }
  
  // ‚úÖ ESC - –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  if (e.code === 'Escape') {
    const modal = document.querySelector('.victory-modal.active');
    if (modal) {
      e.preventDefault();
      const rejectBtn = modal.querySelector('.btn-reject');
      if (rejectBtn) rejectBtn.click();
    }
  }
  
  // ‚úÖ DELETE - —É–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ–∫—Ç–æ—Ä
  if (e.code === 'Delete' && !isInputFocused) {
    const selected = listEl.querySelector('.sector-item.selected');
    if (selected) {
      e.preventDefault();
      const deleteBtn = selected.querySelector('.delete-btn');
      if (deleteBtn) deleteBtn.click();
    }
  }
  
  // ‚úÖ CTRL+A - –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ —Å–µ–∫—Ç–æ—Ä—ã
  if (e.ctrlKey && e.code === 'KeyA' && !isInputFocused) {
    e.preventDefault();
    const items = listEl.querySelectorAll('.sector-item');
    items.forEach(item => item.classList.add('selected'));
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ —Å debounce
const debouncedResize = debounce(() => wheel.resize(), 150);
window.addEventListener('resize', debouncedResize, { passive: true });

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ localStorage
const savedSettings = (() => {
  try {
    const data = localStorage.getItem('hellwheel.settings');
    return data ? JSON.parse(data) : {};
  } catch {
    return {};
  }
})();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–∞ –∏ —Ä–µ–∂–∏–º–æ–≤
if (cbClicks) {
  cbClicks.checked = savedSettings.clicks !== undefined ? savedSettings.clicks : true;
  audioBus.setClickEnabled(cbClicks.checked);
  cbClicks.addEventListener('change', (e) => {
    audioBus.setClickEnabled(e.target.checked);
    saveSettings();
  });
}

if (cbAmbient) {
  cbAmbient.checked = savedSettings.ambient !== undefined ? savedSettings.ambient : false;
  audioBus.setAmbientEnabled(cbAmbient.checked);
  cbAmbient.addEventListener('change', async (e) => {
    // üî• –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∞—É–¥–∏–æ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –º—É–∑—ã–∫–∏
    if (e.target.checked && !audioBus.isUnlocked()) {
      console.log('üéµ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞—É–¥–∏–æ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏...');
      await audioBus._unlock();
    }
    
    audioBus.setAmbientEnabled(e.target.checked);
    saveSettings();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
    if (e.target.checked && /iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
      console.log('üì± –ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ - –º—É–∑—ã–∫–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è');
    }
  });
}

if (cbFate) {
  cbFate.checked = savedSettings.fate !== undefined ? savedSettings.fate : false;
  wheel.setFateTemptation(cbFate.checked);
  cbFate.addEventListener('change', (e) => {
    wheel.setFateTemptation(e.target.checked);
    saveSettings();
  });
}

if (cbElimination) {
  cbElimination.checked = savedSettings.elimination !== undefined ? savedSettings.elimination : false;
  ui.setEliminationMode(cbElimination.checked);
  cbElimination.addEventListener('change', (e) => {
    ui.setEliminationMode(e.target.checked);
    saveSettings();
  });
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
function saveSettings() {
  try {
    const settings = {
      clicks: cbClicks?.checked ?? true,
      ambient: cbAmbient?.checked ?? false,
      fate: cbFate?.checked ?? false,
      elimination: cbElimination?.checked ?? false
    };
    localStorage.setItem('hellwheel.settings', JSON.stringify(settings));
  } catch (e) {
    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', e);
  }
}

// üî• –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ –∑–≤—É–∫–µ
if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
  const hasSeenHint = localStorage.getItem('hellwheel.audioHintShown');
  if (!hasSeenHint) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    setTimeout(() => {
      const Toast = window.Toast || class {
        static show(msg) { console.log(msg); }
      };
      Toast.show('üí° –ö–æ—Å–Ω–∏—Ç–µ—Å—å —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∑–≤—É–∫–∞', 3000);
      localStorage.setItem('hellwheel.audioHintShown', 'true');
    }, 2000);
  }
}

// –î–µ–ª–∞–µ–º –∫–æ–ª–µ—Å–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.wheel = wheel;