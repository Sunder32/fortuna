class AudioBus {
  constructor() {
    this.ctx = null;
    this.master = null;
    this.enabled = { clicks: true, ambient: false };
    this._unlocked = false;
    this._unlockHandler = this._unlock.bind(this);
    this.ambientSource = null;
    this.ambientBuffer = null;
    this.clickBuffer = null;
    this.chaosBuffer = null; // üåÄ –ë—É—Ñ–µ—Ä –¥–ª—è –∑–≤—É–∫–∞ —Ö–∞–æ—Å–∞
    this.chaosSource = null; // üåÄ –ò—Å—Ç–æ—á–Ω–∏–∫ –∑–≤—É–∫–∞ —Ö–∞–æ—Å–∞
    this.chaosGain = null; // üåÄ Gain –¥–ª—è –∑–≤—É–∫–∞ —Ö–∞–æ—Å–∞
    
    // üó£Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –æ–∑–≤—É—á–∫–∏
    this._initVoices();
  }
  
  // üó£Ô∏è –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –≥–æ–ª–æ—Å–æ–≤
  _initVoices() {
    if ('speechSynthesis' in window) {
      // –ì–æ–ª–æ—Å–∞ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –ø–æ—ç—Ç–æ–º—É –∂–¥—ë–º —Å–æ–±—ã—Ç–∏—è
      if (window.speechSynthesis.getVoices().length === 0) {
        window.speechSynthesis.addEventListener('voiceschanged', () => {
          console.log('üó£Ô∏è –ì–æ–ª–æ—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', window.speechSynthesis.getVoices().length);
        }, { once: true });
      }
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≥–æ–ª–æ—Å–æ–≤
      window.speechSynthesis.getVoices();
    }
  }

  isUnlocked() {
    return this._unlocked;
  }

  async initOnFirstGesture() {
    if (this._unlocked) return;
    
    // üî• –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    const events = [
      'pointerdown', 'touchstart', 'touchend', 
      'mousedown', 'keydown', 'click'
    ];
    
    events.forEach(evt => {
      window.addEventListener(evt, this._unlockHandler, { 
        once: true, 
        passive: true,
        capture: true  // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –Ω–∞ —Ñ–∞–∑–µ –∑–∞—Ö–≤–∞—Ç–∞
      });
      // –î—É–±–ª–∏—Ä—É–µ–º –Ω–∞ document –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
      document.addEventListener(evt, this._unlockHandler, { 
        once: true, 
        passive: true,
        capture: true
      });
    });
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ body
    document.body?.addEventListener('touchstart', this._unlockHandler, { 
      once: true, 
      passive: true 
    });
  }

  async _unlock() {
    try {
      if (!this.ctx) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º AudioContext —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        const AudioContextClass = window.AudioContext || 
                                  window.webkitAudioContext || 
                                  window.mozAudioContext;
        if (!AudioContextClass) {
          console.warn('AudioContext –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
          this._unlocked = true;
          return;
        }
        
        this.ctx = new AudioContextClass();
        this.master = this.ctx.createGain();
        this.master.gain.value = 1.0;
        this.master.connect(this.ctx.destination);
      }
      
      // üî• –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
      if (this.ctx.state === 'suspended') {
        await this.ctx.resume();
      }
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è iOS
      if (this.ctx.state === 'suspended') {
        // –ü—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        setTimeout(async () => {
          try {
            await this.ctx.resume();
          } catch (e) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å AudioContext:', e);
          }
        }, 100);
      }
      
      this._unlocked = true;
      await this._preloadClickSound(); // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –∑–≤—É–∫ –∫–ª–∏–∫–∞
      
      console.log('‚úÖ Audio —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! State:', this.ctx.state);
    } catch (e) {
      console.warn('WebAudio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', e);
      this._unlocked = true;
    }
  }

  async _preloadClickSound() {
    if (this.clickBuffer) return;
    try {
      // –ü—Ä–æ—Å—Ç–æ–π —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–≤—É–∫ —â–µ–ª—á–∫–∞
      const duration = 0.1;
      const sampleRate = this.ctx.sampleRate;
      const buffer = this.ctx.createBuffer(1, sampleRate * duration, sampleRate);
      const data = buffer.getChannelData(0);
      for (let i = 0; i < data.length; i++) {
        const t = i / sampleRate;
        const envelope = Math.exp(-t * 50);
        const noise = Math.random() * 2 - 1;
        data[i] = noise * envelope * 0.5;
      }
      this.clickBuffer = buffer;
    } catch (e) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–≤—É–∫ —â–µ–ª—á–∫–∞:', e);
    }
  }

  setClickEnabled(v) { this.enabled.clicks = !!v; }
  setAmbientEnabled(v) { 
    this.enabled.ambient = !!v;
    if (this.enabled.ambient) {
      this.startAmbient();
    } else {
      this.stopAmbient();
    }
  }

  click(volume = 1.0, rate = 1.0) {
    if (!this.enabled.clicks) return;
    
    // üî• –ï—Å–ª–∏ –∞—É–¥–∏–æ –µ—â—ë –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ, –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
    if (!this._unlocked) {
      this._unlock();
      return;
    }
    
    if (!this.ctx || !this.clickBuffer) return;
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
      if (this.ctx.state === 'suspended') {
        this.ctx.resume().then(() => {
          this._playClick(volume, rate);
        });
      } else {
        this._playClick(volume, rate);
      }
    } catch (e) {
      console.warn('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞:', e);
    }
  }

  _playClick(volume, rate) {
    try {
      const source = this.ctx.createBufferSource();
      source.buffer = this.clickBuffer;
      source.playbackRate.value = rate;

      const gain = this.ctx.createGain();
      gain.gain.value = volume;
      
      source.connect(gain).connect(this.master);
      source.start(0);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∞–µ–º —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
      setTimeout(() => {
        try {
          source.disconnect();
          gain.disconnect();
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        }
      }, 1000);
    } catch (e) {
      console.warn('–û—à–∏–±–∫–∞ _playClick:', e);
    }
  }

  async startAmbient() {
    if (!this.enabled.ambient || this.ambientSource) return;
    
    // üî• –ï—Å–ª–∏ –∞—É–¥–∏–æ –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ, –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
    if (!this._unlocked) {
      await this._unlock();
    }
    
    if (!this.ctx) return;
    
    try {
      // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
      if (this.ctx.state === 'suspended') {
        await this.ctx.resume();
      }
      
      if (!this.ambientBuffer) {
        console.log('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏...');
        const response = await fetch('assets/audio/ambient.mp3');
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const arrayBuffer = await response.arrayBuffer();
        this.ambientBuffer = await this.ctx.decodeAudioData(arrayBuffer);
        console.log('‚úÖ –§–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!');
      }
      
      this.ambientSource = this.ctx.createBufferSource();
      this.ambientSource.buffer = this.ambientBuffer;
      this.ambientSource.loop = true;
      
      const gain = this.ctx.createGain();
      gain.gain.value = 0;
      this.ambientSource.connect(gain).connect(this.master);
      
      // –ü–ª–∞–≤–Ω–æ–µ –Ω–∞—Ä–∞—Å—Ç–∞–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
      gain.gain.linearRampToValueAtTime(0.3, this.ctx.currentTime + 2);
      
      this.ambientSource.start(0);
      console.log('üéµ –§–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!');
    } catch (e) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–π –∑–≤—É–∫:', e);
      this.ambientSource = null;
    }
  }

  stopAmbient() {
    if (this.ambientSource) {
      try {
        this.ambientSource.stop();
      } catch (e) {
        // Ignore errors if already stopped
      }
      this.ambientSource = null;
    }
  }

  // üå™Ô∏è –ó–≤—É–∫ –≤–µ—Ç—Ä–∞ (–≥—Ä–æ–º–∫–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∫–æ–ª–µ—Å–∞)
  playWind(velocity = 0) {
    if (!this.enabled.clicks || !this.ctx) return;
    
    try {
      // –°–æ–∑–¥–∞—ë–º —à—É–º –≤–µ—Ç—Ä–∞
      const duration = 0.3;
      const sampleRate = this.ctx.sampleRate;
      const buffer = this.ctx.createBuffer(1, duration * sampleRate, sampleRate);
      const data = buffer.getChannelData(0);
      
      // –ù–∏–∑–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–π —à—É–º —Å –º–æ–¥—É–ª—è—Ü–∏–µ–π
      for (let i = 0; i < data.length; i++) {
        const t = i / sampleRate;
        const freq = 50 + velocity * 20; // –ß–∞—Å—Ç–æ—Ç–∞ —Ä–∞—Å—Ç—ë—Ç —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é
        const mod = Math.sin(t * freq * Math.PI * 2);
        const noise = (Math.random() * 2 - 1) * 0.3;
        data[i] = noise * mod * Math.min(velocity / 20, 1); // –ì—Ä–æ–º–∫–æ—Å—Ç—å –æ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏
      }
      
      const source = this.ctx.createBufferSource();
      source.buffer = buffer;
      
      // –§–∏–ª—å—Ç—Ä –¥–ª—è "–≤–æ–∑–¥—É—à–Ω–æ—Å—Ç–∏"
      const filter = this.ctx.createBiquadFilter();
      filter.type = 'lowpass';
      filter.frequency.value = 800 + velocity * 50;
      
      const gain = this.ctx.createGain();
      gain.gain.value = Math.min(velocity / 30, 0.4);
      
      source.connect(filter).connect(gain).connect(this.master);
      source.start();
    } catch (e) {
      console.warn('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞ –≤–µ—Ç—Ä–∞:', e);
    }
  }

  // üîî –ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π –∑–≤–æ–Ω (—É–¥–∞—Ä –æ –∑—É–±–µ—Ü)
  playMetalCling(intensity = 1.0) {
    if (!this.enabled.clicks || !this.ctx) return;
    
    try {
      const now = this.ctx.currentTime;
      
      // –ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π —Ä–µ–∑–æ–Ω–∞–Ω—Å - –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–æ—Ç
      const frequencies = [800, 1200, 1800, 2400];
      
      frequencies.forEach((freq, i) => {
        const osc = this.ctx.createOscillator();
        osc.type = 'sine';
        osc.frequency.value = freq;
        
        const gain = this.ctx.createGain();
        const volume = (0.15 / (i + 1)) * intensity;
        gain.gain.setValueAtTime(volume, now);
        gain.gain.exponentialRampToValueAtTime(0.01, now + 0.3);
        
        osc.connect(gain).connect(this.master);
        osc.start(now);
        osc.stop(now + 0.3);
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º —à—É–º –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
      const duration = 0.15;
      const sampleRate = this.ctx.sampleRate;
      const buffer = this.ctx.createBuffer(1, duration * sampleRate, sampleRate);
      const data = buffer.getChannelData(0);
      
      for (let i = 0; i < data.length; i++) {
        const t = i / sampleRate;
        const envelope = Math.exp(-t * 20);
        const noise = Math.random() * 2 - 1;
        data[i] = noise * envelope * 0.1 * intensity;
      }
      
      const noiseSource = this.ctx.createBufferSource();
      noiseSource.buffer = buffer;
      
      const filter = this.ctx.createBiquadFilter();
      filter.type = 'highpass';
      filter.frequency.value = 2000;
      
      noiseSource.connect(filter).connect(this.master);
      noiseSource.start();
    } catch (e) {
      console.warn('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–æ–≥–æ –∑–≤–æ–Ω–∞:', e);
    }
  }

  // üé∫ –§–∞–Ω—Ñ–∞—Ä—ã –ø–æ–±–µ–¥—ã
  playVictoryFanfare() {
    if (!this.enabled.clicks || !this.ctx) return;
    
    try {
      const now = this.ctx.currentTime;
      
      // –¢–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –º–µ–ª–æ–¥–∏—è (C-E-G-C)
      const notes = [
        { freq: 261.63, time: 0, duration: 0.2 },    // C
        { freq: 329.63, time: 0.15, duration: 0.2 }, // E
        { freq: 392.00, time: 0.3, duration: 0.2 },  // G
        { freq: 523.25, time: 0.45, duration: 0.4 }  // C (–≤—ã—à–µ)
      ];
      
      notes.forEach(note => {
        const osc = this.ctx.createOscillator();
        osc.type = 'triangle';
        osc.frequency.value = note.freq;
        
        const gain = this.ctx.createGain();
        const startTime = now + note.time;
        const endTime = startTime + note.duration;
        
        gain.gain.setValueAtTime(0, startTime);
        gain.gain.linearRampToValueAtTime(0.2, startTime + 0.02);
        gain.gain.exponentialRampToValueAtTime(0.01, endTime);
        
        osc.connect(gain).connect(this.master);
        osc.start(startTime);
        osc.stop(endTime);
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≥–∞—Ä–º–æ–Ω–∏–∫–∏ –¥–ª—è –±–æ–≥–∞—Ç—Å—Ç–≤–∞
      notes.forEach(note => {
        const osc = this.ctx.createOscillator();
        osc.type = 'sine';
        osc.frequency.value = note.freq * 2; // –û–∫—Ç–∞–≤–∞ –≤—ã—à–µ
        
        const gain = this.ctx.createGain();
        const startTime = now + note.time;
        const endTime = startTime + note.duration;
        
        gain.gain.setValueAtTime(0, startTime);
        gain.gain.linearRampToValueAtTime(0.1, startTime + 0.02);
        gain.gain.exponentialRampToValueAtTime(0.01, endTime);
        
        osc.connect(gain).connect(this.master);
        osc.start(startTime);
        osc.stop(endTime);
      });
    } catch (e) {
      console.warn('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ñ–∞–Ω—Ñ–∞—Ä:', e);
    }
  }

  // üé≠ –î—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–≤—É–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
  playDramaticStop() {
    if (!this.enabled.clicks || !this.ctx) return;
    
    try {
      const now = this.ctx.currentTime;
      
      // –ì–ª—É–±–æ–∫–∏–π –±–∞—Å-—É–¥–∞—Ä
      const bass = this.ctx.createOscillator();
      bass.type = 'sine';
      bass.frequency.setValueAtTime(80, now);
      bass.frequency.exponentialRampToValueAtTime(40, now + 0.3);
      
      const bassGain = this.ctx.createGain();
      bassGain.gain.setValueAtTime(0.5, now);
      bassGain.gain.exponentialRampToValueAtTime(0.01, now + 0.5);
      
      bass.connect(bassGain).connect(this.master);
      bass.start(now);
      bass.stop(now + 0.5);
      
      // –†–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏—è
      const duration = 0.8;
      const sampleRate = this.ctx.sampleRate;
      const buffer = this.ctx.createBuffer(1, duration * sampleRate, sampleRate);
      const data = buffer.getChannelData(0);
      
      for (let i = 0; i < data.length; i++) {
        const t = i / sampleRate;
        const envelope = Math.exp(-t * 3);
        const noise = Math.random() * 2 - 1;
        data[i] = noise * envelope * 0.2;
      }
      
      const noiseSource = this.ctx.createBufferSource();
      noiseSource.buffer = buffer;
      
      const filter = this.ctx.createBiquadFilter();
      filter.type = 'lowpass';
      filter.frequency.value = 200;
      
      noiseSource.connect(filter).connect(this.master);
      noiseSource.start(now + 0.1);
    } catch (e) {
      console.warn('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –¥—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–≤—É–∫–∞:', e);
    }
  }

  // üó£Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (Web Speech API)
  speak(text) {
    if (!this.enabled.clicks) return;
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Speech Synthesis
      if ('speechSynthesis' in window) {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        window.speechSynthesis.cancel();
        
        const utterance = new SpeechSynthesisUtterance(text);
        utterance.lang = 'ru-RU';
        utterance.rate = 0.9; // –ù–µ–º–Ω–æ–≥–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ –¥–ª—è –¥—Ä–∞–º—ã
        utterance.pitch = 0.8; // –ù–µ–º–Ω–æ–≥–æ –Ω–∏–∂–µ –¥–ª—è —Å–µ—Ä—å—ë–∑–Ω–æ—Å—Ç–∏
        utterance.volume = 0.8;
        
        window.speechSynthesis.speak(utterance);
      }
    } catch (e) {
      console.warn('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏:', e);
    }
  }

  // üåÄ –ó–í–£–ö –†–ï–ñ–ò–ú–ê –•–ê–û–°–ê - –∑–ª–æ–≤–µ—â–∏–π —ç–º–±–∏–µ–Ω—Ç
  async startChaosSound() {
    console.log('üåÄ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–≤—É–∫ —Ö–∞–æ—Å–∞...');
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –∏–≥—Ä–∞–µ—Ç
    if (this.chaosSource) {
      try {
        this.chaosSource.stop();
      } catch (e) {
        // ignore
      }
      this.chaosSource = null;
      this.chaosGain = null;
    }
    
    // üî• –ï—Å–ª–∏ –∞—É–¥–∏–æ –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ, –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
    if (!this._unlocked) {
      console.log('üåÄ –ê—É–¥–∏–æ –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ, —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º...');
      await this._unlock();
    }
    
    if (!this.ctx) {
      console.warn('üåÄ AudioContext –Ω–µ —Å–æ–∑–¥–∞–Ω');
      return;
    }
    
    try {
      // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (this.ctx.state === 'suspended') {
        await this.ctx.resume();
      }
      
      if (!this.chaosBuffer) {
        console.log('üåÄ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–≤—É–∫–∞ —Ö–∞–æ—Å–∞...');
        const response = await fetch('assets/audio/shadows-of-dread_87945.mp3');
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const arrayBuffer = await response.arrayBuffer();
        this.chaosBuffer = await this.ctx.decodeAudioData(arrayBuffer);
        console.log('‚úÖ –ó–≤—É–∫ —Ö–∞–æ—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω!');
      }
      
      this.chaosSource = this.ctx.createBufferSource();
      this.chaosSource.buffer = this.chaosBuffer;
      this.chaosSource.loop = true; // üî• –ó–ê–¶–ò–ö–õ–ò–í–ê–ï–ú –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —É–∂–∞—Å–∞
      
      // üî• –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–∫–∞–∂–µ–Ω–∏–µ –∏ —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏—é –¥–ª—è –±–æ–ª—å—à–µ–≥–æ —É–∂–∞—Å–∞
      const distortion = this.ctx.createWaveShaper();
      distortion.curve = this._makeDistortionCurve(50);
      
      const filter = this.ctx.createBiquadFilter();
      filter.type = 'lowpass';
      filter.frequency.value = 1500;
      filter.Q.value = 5;
      
      const gain = this.ctx.createGain();
      gain.gain.value = 0;
      
      // –¶–µ–ø–æ—á–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤: –∏—Å—Ç–æ—á–Ω–∏–∫ -> –∏—Å–∫–∞–∂–µ–Ω–∏–µ -> —Ñ–∏–ª—å—Ç—Ä -> –≥—Ä–æ–º–∫–æ—Å—Ç—å
      this.chaosSource
        .connect(distortion)
        .connect(filter)
        .connect(gain)
        .connect(this.master);
      
      // –ü–ª–∞–≤–Ω–æ–µ –Ω–∞—Ä–∞—Å—Ç–∞–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
      gain.gain.linearRampToValueAtTime(0.7, this.ctx.currentTime + 1.5);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º gain –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç—å—é
      this.chaosGain = gain;
      
      this.chaosSource.start(0);
      
      console.log('‚úÖ –ó–≤—É–∫ —Ö–∞–æ—Å–∞ –∑–∞–ø—É—â–µ–Ω –≤ –∑–∞—Ü–∏–∫–ª–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ!');
      return true;
    } catch (e) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–≤—É–∫ —Ö–∞–æ—Å–∞:', e);
      this.chaosSource = null;
      this.chaosGain = null;
      return false;
    }
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∏–≤–æ–π –∏—Å–∫–∞–∂–µ–Ω–∏—è –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
  _makeDistortionCurve(amount) {
    const samples = 44100;
    const curve = new Float32Array(samples);
    const deg = Math.PI / 180;
    
    for (let i = 0; i < samples; i++) {
      const x = (i * 2) / samples - 1;
      curve[i] = ((3 + amount) * x * 20 * deg) / (Math.PI + amount * Math.abs(x));
    }
    
    return curve;
  }

  // üåÄ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–≤—É–∫–∞ —Ö–∞–æ—Å–∞
  stopChaosSound() {
    if (this.chaosSource) {
      try {
        // –ü–ª–∞–≤–Ω–æ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
        if (this.chaosGain) {
          this.chaosGain.gain.linearRampToValueAtTime(0, this.ctx.currentTime + 1);
        }
        
        setTimeout(() => {
          if (this.chaosSource) {
            try {
              this.chaosSource.stop();
            } catch (e) {
              // Ignore if already stopped
            }
            this.chaosSource = null;
            this.chaosGain = null;
          }
        }, 1000);
      } catch (e) {
        console.warn('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–≤—É–∫–∞ —Ö–∞–æ—Å–∞:', e);
        this.chaosSource = null;
        this.chaosGain = null;
      }
    }
  }
  
  // üó£Ô∏è –û–ó–í–£–ß–ö–ê –¢–ï–ö–°–¢–ê (Web Speech API)
  speak(text) {
    if (!text || typeof text !== 'string') return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Speech Synthesis API
    if (!('speechSynthesis' in window)) {
      console.warn('Speech Synthesis API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
      return;
    }
    
    try {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –æ–∑–≤—É—á–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
      window.speechSynthesis.cancel();
      
      const utterance = new SpeechSynthesisUtterance(text);
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞
      utterance.lang = 'ru-RU'; // –†—É—Å—Å–∫–∏–π —è–∑—ã–∫
      utterance.rate = 1.2; // –°–∫–æ—Ä–æ—Å—Ç—å (1.2 = –±—ã—Å—Ç—Ä–µ–µ –Ω–∞ 20%)
      utterance.pitch = 0.8; // –ù–∏–∑–∫–∏–π —Ç–æ–Ω –¥–ª—è –¥–µ–º–æ–Ω–∏—á–Ω–æ—Å—Ç–∏
      utterance.volume = 0.9; // –ì—Ä–æ–º–∫–æ—Å—Ç—å
      
      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –º—É–∂—Å–∫–æ–π —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å
      const voices = window.speechSynthesis.getVoices();
      const russianVoice = voices.find(v => 
        v.lang.startsWith('ru') && v.name.toLowerCase().includes('male')
      ) || voices.find(v => v.lang.startsWith('ru'));
      
      if (russianVoice) {
        utterance.voice = russianVoice;
      }
      
      window.speechSynthesis.speak(utterance);
      
    } catch (e) {
      console.warn('–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏:', e);
    }
  }
}

export const audioBus = new AudioBus();