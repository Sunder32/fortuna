// src/js/wheel3d.js - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
import * as THREE from 'three';
import { EffectComposer } from 'three/addons/postprocessing/EffectComposer.js';
import { RenderPass } from 'three/addons/postprocessing/RenderPass.js';
import { UnrealBloomPass } from 'three/addons/postprocessing/UnrealBloomPass.js';
import { FireTrail, Lightning, Comet, FallingStars } from './utils/wheeleffects.js';

const TAU = Math.PI * 2;
const MAX_LABELS = 24;
// üî• –Ø–†–ö–ò–ï –ö–†–ê–°–ù–û-–û–†–ê–ù–ñ–ï–í–´–ï –¶–í–ï–¢–ê (–∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)
const SEGMENT_COLORS = [
  0xff4422,  // –Ø—Ä–∫–æ-–∫—Ä–∞—Å–Ω–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π
  0xcc3311,  // –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π
  0xff6633,  // –û—Ä–∞–Ω–∂–µ–≤—ã–π
  0xaa2200,  // –¢–µ–º–Ω–æ-–±–æ—Ä–¥–æ–≤—ã–π
  0xff7744,  // –°–≤–µ—Ç–ª–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π
  0xbb2211,  // –ö—Ä–∞—Å–Ω–æ–≤–∞—Ç–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π
  0xff5522,  // –ö—Ä–∞—Å–Ω–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π
  0x991100   // –¢–µ–º–Ω–æ-–±–æ—Ä–¥–æ–≤—ã–π
];

class SpinPhysics {
  constructor() {
    this.angle = 0;
    this.vel = 0;
    this.baseFriction = 0.993; // –ë–∞–∑–æ–≤–æ–µ —Ç—Ä–µ–Ω–∏–µ
    this.minSpeed = 0.0001;
    this.maxSpeed = 60; // üî• –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û–ì–û —Ä–µ–∂–∏–º–∞ —Ö–∞–æ—Å–∞!
    this.lastToothHit = -1;
    this.toothCooldown = 0;
    this.sectorCount = 8; // –î–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Ñ–∏–∑–∏–∫–∏
  }
  
  // ‚úÖ –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ï –¢–†–ï–ù–ò–ï –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏
  getDynamicFriction(velocity) {
    const absVel = Math.abs(velocity);
    if (absVel > 20) return 0.996;  // –û—á–µ–Ω—å —Å–ª–∞–±–æ–µ –Ω–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —Å–∫–æ—Ä–æ—Å—Ç—è—Ö
    if (absVel > 15) return 0.995;  // –°–ª–∞–±–æ–µ –Ω–∞ –≤—ã—Å–æ–∫–∏—Ö —Å–∫–æ—Ä–æ—Å—Ç—è—Ö
    if (absVel > 8) return 0.993;   // –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ —Å—Ä–µ–¥–Ω–∏—Ö —Å–∫–æ—Ä–æ—Å—Ç—è—Ö
    if (absVel > 3) return 0.988;   // –°–∏–ª—å–Ω–æ–µ –Ω–∞ –º–∞–ª—ã—Ö —Å–∫–æ—Ä–æ—Å—Ç—è—Ö
    return 0.975;                    // –û—á–µ–Ω—å —Å–∏–ª—å–Ω–æ–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
  }
  
  // ‚úÖ –ê–î–ê–ü–¢–ê–¶–ò–Ø –ø–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—Ç–æ—Ä–æ–≤
  getSectorMultiplier() {
    // –ë–æ–ª—å—à–µ —Å–µ–∫—Ç–æ—Ä–æ–≤ = –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∏–Ω–µ—Ä—Ü–∏–∏
    return Math.sqrt(this.sectorCount / 8);
  }
  
  setSectorCount(count) {
    this.sectorCount = Math.max(2, count);
  }
  
  addImpulse(delta) {
    this.vel = THREE.MathUtils.clamp(this.vel + delta, -this.maxSpeed, this.maxSpeed);
  }
  
  step(dt) {
    this.angle = (this.angle + this.vel * dt) % TAU;
    if (this.angle < 0) this.angle += TAU;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Ç—Ä–µ–Ω–∏–µ
    const dynamicFriction = this.getDynamicFriction(this.vel);
    this.vel *= Math.pow(dynamicFriction, dt * 60);
    
    if (this.toothCooldown > 0) this.toothCooldown -= dt;
    if (Math.abs(this.vel) < this.minSpeed) this.vel = 0;
  }
}

export class HellWheel3D {
  constructor(container, options = {}) {
    this.container = container;
    this.onHit = options.onHit || null;
    this.onResult = options.onResult || null;
    this.audioBus = options.audioBus || null; // üîä –°—Å—ã–ª–∫–∞ –Ω–∞ –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º—É
    this.ui = null;

    this.labels = [];
    this.segmentCount = 0;
    this.isSpinning = false;
    this.physics = new SpinPhysics();

    this.outerRadius = 4.6;
    this.innerRadius = 2.2;
    this.bodyHeight = 1.0;
    this.segmentHeight = 0.5;
    this.labelRadius = 3.6;

    this.activeIndex = -1;
    this.initialized = false;
    this.pointerAngle = 0;
    this.currentAngle = 0;
    this.pendingResultIndex = -1;
    this.currentPointerIndex = null;
    this._randBuffer = new Uint32Array(1);
    
    // ‚úÖ –ò–ù–ï–†–¶–ò–Ø –£–ö–ê–ó–ê–¢–ï–õ–Ø
    this.pointerInertia = 0;
    this.pointerVelocity = 0;
    
    // ‚úÖ –°–í–ê–ô–ü–´ –î–õ–Ø –ú–û–ë–ò–õ–¨–ù–´–•
    this.touchStartX = 0;
    this.touchStartY = 0;
    this.touchStartTime = 0;
    
    // ‚úÖ –°–ò–°–¢–ï–ú–ê –ò–°–ö–†
    this.sparkParticles = [];
    
    // üåÄ –†–ï–ñ–ò–ú –•–ê–û–°–ê
    this.chaosMode = false;
    this.chaosEvents = null;
    this.chaosStartTime = null;
    this.chaosPauseEnd = null;
    this.chaosPausedVelocity = 0;
    
    // –î–ª—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø–æ–±–µ–¥—ã
    this.victoryEffects = [];
    this.fireRing = null;
    
    // –§—Ä–∞–∑—ã –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    this.hellPhrases = [
      "–ö–æ–ª–µ—Å–æ –≤—ã–±—Ä–∞–ª–æ —Å–≤–æ—é –∂–µ—Ä—Ç–≤—É! –ü–ª–∞–º—è –∞–¥–∞ –æ–∑–∞—Ä–∏–ª–æ —Ç–≤–æ–π –ø—É—Ç—å.",
      "–î–µ–º–æ–Ω—ã –∞–ø–ª–æ–¥–∏—Ä—É—é—Ç! –°—É–¥—å–±–∞ –Ω–∞—á–µ—Ä—Ç–∞–Ω–∞ –æ–≥–Ω–µ–Ω–Ω—ã–º–∏ —Ä—É–Ω–∞–º–∏.",
      "–í—Ä–∞—Ç–∞ –ø—Ä–µ–∏—Å–ø–æ–¥–Ω–µ–π –ø—Ä–∏–æ—Ç–∫—Ä—ã–ª–∏—Å—å, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!",
      "–ê–¥—Å–∫–æ–µ –ø–ª–∞–º—è —Ç–∞–Ω—Ü—É–µ—Ç –≤ —á–µ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è —Å—É–¥—å–±—ã!",
      "–ö–Ω–∏–≥–∞ –ø—Ä–æ–∫–ª—è—Ç—ã—Ö –ø–æ–ø–æ–ª–Ω–∏–ª–∞—Å—å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º...",
      "–û–≥–Ω–µ–Ω–Ω—ã–µ —Ü–µ–ø–∏ —Å—É–¥—å–±—ã —Å–æ–º–∫–Ω—É–ª–∏—Å—å! –í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω.",
      "–¢—ë–º–Ω—ã–µ —Å–∏–ª—ã —É–∫–∞–∑–∞–ª–∏ –ø–µ—Ä—Å—Ç–æ–º –Ω–∞ –∏–∑–±—Ä–∞–Ω–Ω–∏–∫–∞!",
      "–ö–æ–ª–µ—Å–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å, –Ω–æ —ç—Ö–æ –µ–≥–æ –≤—Ä–∞—â–µ–Ω–∏—è –±—É–¥–µ—Ç –∑–≤—É—á–∞—Ç—å –≤–µ—á–Ω–æ...",
      "–ü–ª–∞–º–µ–Ω–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç –≤—ã–Ω–µ—Å–µ–Ω! –î–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç—Å—è –≤–æ–ª—è –∫–æ–ª–µ—Å–∞.",
      "–ò–Ω—Ñ–µ—Ä–Ω–∞–ª—å–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –≤—ã–±—Ä–∞–ª –¥–æ—Å—Ç–æ–π–Ω–æ–≥–æ!",
      "–î—É—à–∏ –¥–µ–º–æ–Ω–æ–≤ –ª–∏–∫—É—é—Ç - –∂—Ä–µ–±–∏–π –±—Ä–æ—à–µ–Ω!",
      "–û–≥–Ω–µ–Ω–Ω–∞—è –ø–µ—á–∞—Ç—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–º —Å–µ–∫—Ç–æ—Ä–µ.",
      "–ü—Ä–µ–∏—Å–ø–æ–¥–Ω—è—è –æ–≥–ª–∞—Å–∏–ª–∞ —Å–≤–æ—ë —Ä–µ—à–µ–Ω–∏–µ –≥—Ä–æ–º–æ–º –∏ –ø–ª–∞–º–µ–Ω–µ–º!",
      "–†–∞—Å–∫–∞–ª—ë–Ω–Ω—ã–µ —Ä—É–Ω—ã —Å–ª–æ–∂–∏–ª–∏—Å—å –≤ –∏–º—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.",
      "–ê–¥—Å–∫–∏–π —Å–æ–≤–µ—Ç –µ–¥–∏–Ω–æ–≥–ª–∞—Å–Ω–æ —É–∫–∞–∑–∞–ª –Ω–∞ –∏–∑–±—Ä–∞–Ω–Ω–∏–∫–∞!"
    ];

    this._initThree();
    this._buildWheel();
    this._createVictoryModal();
    this.resize();
    this._animate();
    this._playEntranceAnimation(); // üé¨ –≠—Ñ—Ñ–µ–∫—Ç–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –∫–æ–ª–µ—Å–∞
    this.initialized = true;
  }

  spin(strength = 1, chaosMode = false) {
    if (this.segmentCount < 2 || this.isSpinning) return;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ä–≥–Ω—É—Ç—å –ø—Ä–∏–≥–æ–≤–æ—Ä –ø—Ä–∏ –Ω–æ–≤–æ–º –≤—Ä–∞—â–µ–Ω–∏–∏
    if (!this.isReSpin) {
      this.canRejectFate = true;
    } else {
      this.canRejectFate = false;
      this.isReSpin = false;
    }
    
    if (this.victoryModal && this.victoryModal.classList.contains('active')) {
      this.victoryModal.classList.remove('active');
    }
    
    this._resetVisualState();
    this._clearVictoryEffects();

    // –ü–ï–†–ï–ú–ï–®–ò–í–ê–ï–ú –°–ï–ö–¢–û–†–ê –¥–ª—è –±–æ–ª—å—à–µ–π —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏!
    if (!this.originalLabels || this.originalLabels.length === 0) {
      this.originalLabels = [...this.labels];
      console.log('üé≤ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–∫–∏:', this.originalLabels);
    }
    
    // üåÄ –†–ï–ñ–ò–ú –•–ê–û–°–ê - –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
    let shuffled;
    if (chaosMode) {
      const shuffleCount = 2 + Math.floor(this._randomFloat() * 4); // 2-5 —Ä–∞–∑
      shuffled = [...this.originalLabels];
      for (let i = 0; i < shuffleCount; i++) {
        shuffled = this._shuffleArray(shuffled);
      }
      console.log(`üåÄ –†–ï–ñ–ò–ú –•–ê–û–°–ê: ${shuffleCount} –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–π`);
    } else {
      shuffled = this._shuffleArray(this.originalLabels);
    }
    
    console.log('üé≤ –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ:', {
      '–¥–æ': [...this.labels],
      '–ø–æ—Å–ª–µ': shuffled
    });
    
    this.labels = shuffled;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É–≥–æ–ª –∫–æ–ª–µ—Å–∞ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
    this.physics.angle = 0;
    if (this.root) {
      this.root.rotation.z = 0;
    }
    
    // –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ–∫—Ç–æ—Ä–∞ —Å –Ω–æ–≤—ã–º –ø–æ—Ä—è–¥–∫–æ–º
    this._rebuildSectors();
    
    // ‚úÖ –ê–î–ê–ü–¢–ê–¶–ò–Ø –ü–û–î –ö–û–õ–ò–ß–ï–°–¢–í–û –°–ï–ö–¢–û–†–û–í
    this.physics.setSectorCount(this.segmentCount);
    const sectorMultiplier = this.physics.getSectorMultiplier();
    
    this.physics.vel = 0;
    
    // üåÄ –†–ï–ñ–ò–ú –•–ê–û–°–ê - —Å–ª—É—á–∞–π–Ω–∞—è —Å–∏–ª–∞ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    let spinForce;
    let direction;
    
    if (chaosMode) {
      // –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å —Å–∏–ª—ã (15-45)
      spinForce = (15 + this._randomFloat() * 30) * strength * sectorMultiplier;
      // –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–≤–æ–π–Ω–æ–≥–æ –≤—Ä–∞—â–µ–Ω–∏—è
      direction = this._randomFloat() < 0.5 ? 1 : -1;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º —Ö–∞–æ—Å–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∞–Ω–∏–º–∞—Ü–∏–∏
      this.chaosMode = true;
      this.chaosEvents = this._generateChaosEvents();
      this.chaosWarningShown = false; // üî• –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
      
      console.log('üåÄ –†–ï–ñ–ò–ú –•–ê–û–°–ê: –§–∞–∑–∞ —Ä–∞–∑–≥–æ–Ω–∞ 2.5 —Å–µ–∫, –∑–∞—Ç–µ–º', this.chaosEvents.length, '—Å–æ–±—ã—Ç–∏–π');
    } else {
      spinForce = (22 + this._randomFloat() * 15) * strength * sectorMultiplier;
      direction = this._randomFloat() < 0.5 ? 1 : -1;
      this.chaosMode = false;
      this.chaosEvents = null;
      this.chaosWarningShown = false;
    }
    
    this.physics.addImpulse(spinForce * direction);
    
    // –°–±—Ä–æ—Å –∏–Ω–µ—Ä—Ü–∏–∏ —É–∫–∞–∑–∞—Ç–µ–ª—è
    this.pointerInertia = 0;
    this.pointerVelocity = 0;
    
    this.isSpinning = true;
    this.activeIndex = -1;
    
    if (this.pointerGroup) {
      this.pointerGroup.rotation.z = 0;
    }
    
    // üî• –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ–≥–Ω–µ–Ω–Ω—ã–π —à–ª–µ–π—Ñ –ø—Ä–∏ –≤—Ä–∞—â–µ–Ω–∏–∏
    if (this.fireTrail) {
      this.fireTrail.start();
    }
    
    const modeText = chaosMode ? ' [–†–ï–ñ–ò–ú –•–ê–û–°–ê]' : '';
    console.log(`üé∞ –°–ø–∏–Ω: —Å–∏–ª–∞=${spinForce.toFixed(1)}, —Å–µ–∫—Ç–æ—Ä–æ–≤=${this.segmentCount}${modeText}`);
  }
  
  // üåÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π —Ö–∞–æ—Å–∞
  _generateChaosEvents() {
    const events = [];
    
    // ÔøΩ –§–ê–ó–ê –†–ê–ó–ì–û–ù–ê: 2500–º—Å (2.5 —Å–µ–∫—É–Ω–¥—ã) –∫–æ–ª–µ—Å–æ –∫—Ä—É—Ç–∏—Ç—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø–æ—Ç–æ–º –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –•–ê–û–°!
    const WARMUP_PHASE = 2500;
    
    // ÔøΩüòà –ì–ê–†–ê–ù–¢–ò–†–£–ï–ú –ú–ò–ù–ò–ú–£–ú 5 –°–û–ë–´–¢–ò–ô –ö–ê–ñ–î–û–ì–û –¢–ò–ü–ê!
    const eventTypes = ['boost', 'brake', 'reverse', 'mega-boost', 'double-reverse', 'hurricane'];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º—É–º 5 —Å–æ–±—ã—Ç–∏–π –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ (–ë–ï–ó –ü–ê–£–ó–´!)
    for (const eventType of eventTypes) {
      for (let i = 0; i < 5; i++) {
        // üî• –ó–ê–î–ï–†–ñ–ö–ê: 2500-6500–º—Å (—Ñ–∞–∑–∞ —Ä–∞–∑–≥–æ–Ω–∞ + —Ö–∞–æ—Å)
        const delay = WARMUP_PHASE + this._randomFloat() * 4000;
        const event = this._createChaosEvent(eventType, delay);
        if (event) events.push(event);
      }
    }
    
    // üî• –ü–ê–£–ó–ê –û–ß–ï–ù–¨ –†–ï–î–ö–û - —Ç–æ–ª—å–∫–æ 1-2 —Ä–∞–∑–∞ –∑–∞ –≤—Å—ë –≤—Ä–∞—â–µ–Ω–∏–µ (5% —à–∞–Ω—Å)
    if (this._randomFloat() < 0.05) {
      const pauseCount = Math.floor(this._randomFloat() * 2) + 1; // 1-2 –ø–∞—É–∑—ã
      for (let i = 0; i < pauseCount; i++) {
        const delay = WARMUP_PHASE + this._randomFloat() * 4000;
        const event = this._createChaosEvent('pause', delay);
        if (event) events.push(event);
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –µ—â—ë 20-40 –°–õ–£–ß–ê–ô–ù–´–• —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ì–û –•–ê–û–°–ê
    const extraCount = 20 + Math.floor(this._randomFloat() * 20);
    for (let i = 0; i < extraCount; i++) {
      // üî• –ó–ê–î–ï–†–ñ–ö–ê: 2300-6000–º—Å (–Ω–µ–º–Ω–æ–≥–æ —Ä–∞–Ω—å—à–µ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è)
      const delay = WARMUP_PHASE - 200 + this._randomFloat() * 3700;
      const type = Math.floor(this._randomFloat() * 6); // –¢–ï–ü–ï–†–¨ 6 —Ç–∏–ø–æ–≤ (–±–µ–∑ –ø–∞—É–∑—ã)
      
      let event = null;
      switch(type) {
        case 0: // –í–Ω–µ–∑–∞–ø–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ
          event = {
            type: 'boost',
            delay: delay,
            strength: 3 + this._randomFloat() * 7, // +3 –¥–æ +10
            executed: false
          };
          break;
        case 1: // –†–µ–∑–∫–æ–µ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ
          event = {
            type: 'brake',
            delay: delay,
            strength: 0.3 + this._randomFloat() * 0.4, // x0.3 –¥–æ x0.7
            executed: false
          };
          break;
        case 2: // –°–º–µ–Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          event = {
            type: 'reverse',
            delay: delay,
            strength: 0.6 + this._randomFloat() * 0.3, // –°–æ—Ö—Ä–∞–Ω—è–µ—Ç 60-90% —Å–∫–æ—Ä–æ—Å—Ç–∏
            executed: false
          };
          break;
        case 3: // üî• –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û–ï –£–°–ö–û–†–ï–ù–ò–ï
          event = {
            type: 'mega-boost',
            delay: delay,
            strength: 15 + this._randomFloat() * 25, // +15 –¥–æ +40!
            executed: false
          };
          break;
        case 4: // üí• –î–í–û–ô–ù–û–ô –†–ï–í–ï–†–° (—Å–º–µ–Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∞–∂–¥—ã)
          event = {
            type: 'double-reverse',
            delay: delay,
            strength: 0.7 + this._randomFloat() * 0.2,
            executed: false
          };
          break;
        case 5: // üå™Ô∏è –£–†–ê–ì–ê–ù–ù–û–ï –í–†–ê–©–ï–ù–ò–ï (—Å–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)
          event = {
            type: 'hurricane',
            delay: delay,
            strength: 20 + this._randomFloat() * 30, // +20 –¥–æ +50!!!
            executed: false
          };
          break;
        default: // –ù–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ - –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ
          event = {
            type: 'boost',
            delay: delay,
            strength: 5,
            executed: false
          };
          break;
      }
      
      if (event) {
        events.push(event);
      }
    }
    
    console.log(`üòà –ì–ï–ù–ï–†–ò–†–û–í–ê–ù–û ${events.length} –°–û–ë–´–¢–ò–ô –•–ê–û–°–ê!!!`);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
    return events.sort((a, b) => a.delay - b.delay);
  }
  
  // üòà –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —Ö–∞–æ—Å–∞ –ø–æ —Ç–∏–ø—É
  _createChaosEvent(typeName, delay) {
    const eventMap = {
      'boost': () => ({
        type: 'boost',
        delay: delay,
        strength: 3 + this._randomFloat() * 7,
        executed: false
      }),
      'brake': () => ({
        type: 'brake',
        delay: delay,
        strength: 0.3 + this._randomFloat() * 0.4,
        executed: false
      }),
      'reverse': () => ({
        type: 'reverse',
        delay: delay,
        strength: 0.6 + this._randomFloat() * 0.3,
        executed: false
      }),
      'pause': () => ({
        type: 'pause',
        delay: delay,
        duration: 50 + this._randomFloat() * 300,
        executed: false
      }),
      'mega-boost': () => ({
        type: 'mega-boost',
        delay: delay,
        strength: 15 + this._randomFloat() * 25,
        executed: false
      }),
      'double-reverse': () => ({
        type: 'double-reverse',
        delay: delay,
        strength: 0.7 + this._randomFloat() * 0.2,
        executed: false
      }),
      'hurricane': () => ({
        type: 'hurricane',
        delay: delay,
        strength: 20 + this._randomFloat() * 30,
        executed: false
      })
    };
    
    return eventMap[typeName] ? eventMap[typeName]() : null;
  }
  _resetVisualState() {
    if (this.segmentGroup) {
      this.segmentGroup.children.forEach((child) => {
        const mat = child.material;
        if (!mat) return;
        const baseColor = child.userData?.baseColor;
        const baseEmissive = child.userData?.baseEmissive;

        if (baseColor) mat.color.copy(baseColor);
        if (baseEmissive) {
          mat.emissive.copy(baseEmissive);
          mat.emissiveIntensity = 1.1;
        }
      });
    }

    if (this.labelGroup) {
      this.labelGroup.children.forEach((sprite) => {
        if (!(sprite instanceof THREE.Sprite)) return;
        const mat = sprite.material;
        const base = sprite.userData?.baseScale;

        if (mat) mat.opacity = 0.95;
        if (base) sprite.scale.set(base.x, base.y, 1);
      });
    }
  }

  setLabels(arr) {
    const cleaned = Array.isArray(arr) ? arr.filter(Boolean).slice(0, MAX_LABELS) : [];
    const labelsChanged = JSON.stringify(this.labels) !== JSON.stringify(cleaned);
    
    if (!labelsChanged && this.initialized) return;
    
    if (!cleaned.length) {
      this.segmentCount = 0;
      this.labels = [];
      this.originalLabels = [];
      this.activeIndex = -1;
      this.physics.angle = 0;
      this.currentAngle = 0;
      this.physics.active = false;
      this.currentPointerIndex = null;
      this._rebuildSectors();
      return;
    }

    const currentAngle = this.currentAngle;
    const currentActiveIndex = this.activeIndex;
    
    this.segmentCount = cleaned.length;
    this.labels = cleaned;
    this.originalLabels = [...cleaned]; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
    
    if (!this.isSpinning && this.initialized) {
      this.physics.angle = currentAngle;
      this.activeIndex = currentActiveIndex;
    }
    
    if (this.root && this.initialized) {
      this.root.rotation.z = this.physics.angle;
    }
    
    this._rebuildSectors();
  }

  resize() {
    const rect = this.container.getBoundingClientRect();
    const w = rect.width || 800;
    const h = rect.height || 600;
    
    this.renderer.setSize(w, h, false);
    this.camera.aspect = w / h;
    this.camera.updateProjectionMatrix();
    this.composer.setSize(w, h);
  }

  _initThree() {
    const rect = this.container.getBoundingClientRect();
    const w = rect.width || 800;
    const h = rect.height || 600;

    let slot = this.container.querySelector('.wheel-canvas-slot');
    if (!slot) {
      slot = document.createElement('div');
      slot.className = 'wheel-canvas-slot';
      this.container.prepend(slot);
    }

    this.scene = new THREE.Scene();
    
    // üåå HDR –æ–∫—Ä—É–∂–µ–Ω–∏–µ - –∞–¥—Å–∫–æ–µ –Ω–µ–±–æ
    const gradientTexture = new THREE.DataTexture(
      new Uint8Array([
        10, 1, 3,    // –ù–∏–∑ - —Ç—ë–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π
        20, 5, 5,    // –°–µ—Ä–µ–¥–∏–Ω–∞
        40, 10, 10,  // –í–µ—Ä—Ö - —Ç–µ–º–Ω–µ–µ
      ]),
      1, 3, THREE.RGBFormat
    );
    gradientTexture.needsUpdate = true;
    this.scene.background = gradientTexture;
    this.scene.fog = new THREE.FogExp2(0x0a0103, 0.055); // –£—Å–∏–ª–µ–Ω–Ω—ã–π —Ç—É–º–∞–Ω

    this.camera = new THREE.PerspectiveCamera(40, w / h, 0.1, 80);
    this.camera.position.set(0.65, 1.8, 12.8);
    this.camera.lookAt(0, 0.35, 0);

    this.renderer = new THREE.WebGLRenderer({ 
      antialias: true, 
      alpha: true,
      powerPreference: 'high-performance' // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    });
    this.renderer.setPixelRatio(Math.min(2.2, window.devicePixelRatio || 1));
    this.renderer.shadowMap.enabled = true;
    this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;
    this.renderer.toneMapping = THREE.ACESFilmicToneMapping;
    this.renderer.toneMappingExposure = 1.0; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —è—Ä–∫–æ—Å—Ç—å
    this.renderer.setSize(w, h, false);
    slot.appendChild(this.renderer.domElement);

    // –û—Å–≤–µ—â–µ–Ω–∏–µ
    this.scene.add(new THREE.HemisphereLight(0x6b3030, 0x150202, 0.48));
    
    const key = new THREE.DirectionalLight(0xffbf91, 1.42);
    key.position.set(7.5, 9.2, 8.8);
    key.castShadow = true;
    key.shadow.mapSize.set(2048, 2048);
    this.scene.add(key);

    const rim = new THREE.SpotLight(0xff5f3d, 1.18, 36, THREE.MathUtils.degToRad(42), 0.55, 1.4);
    rim.position.set(-6.2, -5.4, 6.1);
    rim.target.position.set(0, 0.3, 0);
    rim.castShadow = true;
    this.scene.add(rim);
    this.scene.add(rim.target);

    const warmLight = new THREE.PointLight(0x863030, 0.9, 32, 2.6);
    warmLight.position.set(3.2, -3.6, 3.8);
    this.scene.add(warmLight);
    const rimLight = new THREE.PointLight(0xff9b60, 0.55, 40, 1.8);
    rimLight.position.set(-2.4, 6.6, -3.5);
    this.scene.add(rimLight);

    this.composer = new EffectComposer(this.renderer);
    this.composer.addPass(new RenderPass(this.scene, this.camera));
    
    // üî• BLOOM –¥–ª—è —Å–≤–µ—á–µ–Ω–∏—è (—É–º–µ–Ω—å—à–µ–Ω–Ω–∞—è —è—Ä–∫–æ—Å—Ç—å)
    this.bloomPass = new UnrealBloomPass(
      new THREE.Vector2(w, h), 
      0.5,   // strength - –º—è–≥–∫–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ (–±—ã–ª–æ 0.85)
      0.8,   // radius - –º–µ–Ω—å—à–∏–π —Ä–∞–¥–∏—É—Å (–±—ã–ª–æ 1.0)
      0.35   // threshold - —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ —è—Ä–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–±—ã–ª–æ 0.25)
    );
    this.composer.addPass(this.bloomPass);

    this._createParticles();
    this._createStarDust(); // üåü –ó–≤—ë–∑–¥–Ω–∞—è –ø—ã–ª—å
    this._createEmbers();   // üî• –¢–ª–µ—é—â–∏–µ —É–≥–ª–∏
    
    // üî• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ _buildWheel)
    this._effectsToInit = { FireTrail, Lightning, Comet, FallingStars };
  }

  _createParticles() {
    const particleCount = 500;
    const positions = new Float32Array(particleCount * 3);
    const velocities = new Float32Array(particleCount * 3);

    for (let i = 0; i < particleCount; i++) {
      positions[i * 3] = (Math.random() - 0.5) * 20;
      positions[i * 3 + 1] = Math.random() * 15;
      positions[i * 3 + 2] = (Math.random() - 0.5) * 20;

      velocities[i * 3] = (Math.random() - 0.5) * 0.1;
      velocities[i * 3 + 1] = -0.05 - Math.random() * 0.1;
      velocities[i * 3 + 2] = (Math.random() - 0.5) * 0.1;
    }

    const geometry = new THREE.BufferGeometry();
    geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
    this.particleVelocities = velocities;

    const material = new THREE.PointsMaterial({
      color: 0xff8844,
      size: 0.08,
      transparent: true,
      blending: THREE.AdditiveBlending,
      depthWrite: false,
      sizeAttenuation: true,
    });

    this.particles = new THREE.Points(geometry, material);
    this.scene.add(this.particles);
  }

  // üåü –ó–≤—ë–∑–¥–Ω–∞—è –ø—ã–ª—å –≤ —Ñ–æ–Ω–µ
  _createStarDust() {
    const starCount = 1000;
    const positions = new Float32Array(starCount * 3);
    const colors = new Float32Array(starCount * 3);
    const sizes = new Float32Array(starCount);

    for (let i = 0; i < starCount; i++) {
      // –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤ —Å—Ñ–µ—Ä–µ
      const theta = Math.random() * Math.PI * 2;
      const phi = Math.acos(2 * Math.random() - 1);
      const radius = 30 + Math.random() * 20;

      positions[i * 3] = radius * Math.sin(phi) * Math.cos(theta);
      positions[i * 3 + 1] = radius * Math.sin(phi) * Math.sin(theta);
      positions[i * 3 + 2] = radius * Math.cos(phi);

      // –û–≥–Ω–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∑–≤—ë–∑–¥
      const colorChoice = Math.random();
      if (colorChoice < 0.5) {
        colors[i * 3] = 1.0;     // R - –æ—Ä–∞–Ω–∂–µ–≤—ã–µ
        colors[i * 3 + 1] = 0.6;
        colors[i * 3 + 2] = 0.3;
      } else {
        colors[i * 3] = 1.0;     // R - –∫—Ä–∞—Å–Ω—ã–µ
        colors[i * 3 + 1] = 0.3;
        colors[i * 3 + 2] = 0.2;
      }

      sizes[i] = Math.random() * 2 + 0.5;
    }

    const starGeometry = new THREE.BufferGeometry();
    starGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
    starGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));
    starGeometry.setAttribute('size', new THREE.BufferAttribute(sizes, 1));

    const starMaterial = new THREE.PointsMaterial({
      size: 0.15,
      vertexColors: true,
      transparent: true,
      opacity: 0.8,
      blending: THREE.AdditiveBlending,
      depthWrite: false,
      sizeAttenuation: true,
    });

    this.starDust = new THREE.Points(starGeometry, starMaterial);
    this.scene.add(this.starDust);
  }

  // üî• –¢–ª–µ—é—â–∏–µ —É–≥–ª–∏ –≤–æ–∫—Ä—É–≥ –∫–æ–ª–µ—Å–∞
  _createEmbers() {
    const emberCount = 80;
    const positions = new Float32Array(emberCount * 3);
    const velocities = new Float32Array(emberCount * 3);
    const sizes = new Float32Array(emberCount);
    const colors = new Float32Array(emberCount * 3);

    for (let i = 0; i < emberCount; i++) {
      // –ü–æ–∑–∏—Ü–∏—è –≤–æ–∫—Ä—É–≥ –∫–æ–ª–µ—Å–∞
      const angle = Math.random() * Math.PI * 2;
      const radius = 3 + Math.random() * 4;
      const height = (Math.random() - 0.5) * 3;

      positions[i * 3] = Math.cos(angle) * radius;
      positions[i * 3 + 1] = height;
      positions[i * 3 + 2] = Math.sin(angle) * radius;

      // –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –∏ –ø–æ–¥—ä–µ–º
      velocities[i * 3] = (Math.random() - 0.5) * 0.02;
      velocities[i * 3 + 1] = 0.01 + Math.random() * 0.03;
      velocities[i * 3 + 2] = (Math.random() - 0.5) * 0.02;

      // –†–∞–∑–º–µ—Ä —É–≥–ª–µ–π
      sizes[i] = 0.08 + Math.random() * 0.15;

      // –û–≥–Ω–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ (–æ—Ä–∞–Ω–∂–µ–≤—ã–π/–∫—Ä–∞—Å–Ω—ã–π)
      if (Math.random() < 0.6) {
        colors[i * 3] = 1.0;
        colors[i * 3 + 1] = 0.4 + Math.random() * 0.3;
        colors[i * 3 + 2] = 0.1;
      } else {
        colors[i * 3] = 1.0;
        colors[i * 3 + 1] = 0.2;
        colors[i * 3 + 2] = 0.05;
      }
    }

    const emberGeometry = new THREE.BufferGeometry();
    emberGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
    emberGeometry.setAttribute('size', new THREE.BufferAttribute(sizes, 1));
    emberGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));

    const emberMaterial = new THREE.PointsMaterial({
      size: 0.12,
      vertexColors: true,
      transparent: true,
      opacity: 0.8,
      blending: THREE.AdditiveBlending,
      depthWrite: false,
      sizeAttenuation: true,
      map: this._createGlowTexture()
    });

    this.embers = new THREE.Points(emberGeometry, emberMaterial);
    this.emberVelocities = velocities;
    this.scene.add(this.embers);
  }

  // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É —Å–≤–µ—á–µ–Ω–∏—è –¥–ª—è —É–≥–ª–µ–π
  _createGlowTexture() {
    const canvas = document.createElement('canvas');
    canvas.width = 32;
    canvas.height = 32;
    const ctx = canvas.getContext('2d');
    
    const gradient = ctx.createRadialGradient(16, 16, 0, 16, 16, 16);
    gradient.addColorStop(0, 'rgba(255, 255, 255, 1)');
    gradient.addColorStop(0.2, 'rgba(255, 200, 100, 0.8)');
    gradient.addColorStop(0.5, 'rgba(255, 100, 50, 0.5)');
    gradient.addColorStop(1, 'rgba(255, 50, 0, 0)');
    
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, 32, 32);
    
    const texture = new THREE.CanvasTexture(canvas);
    texture.needsUpdate = true;
    return texture;
  }

  _buildWheel() {
    this.root = new THREE.Group();
    this.scene.add(this.root);

    const R = this.outerRadius;
    const r = this.innerRadius;
    const h = this.bodyHeight;

    // –ö–æ—Ä–ø—É—Å –∫–æ–ª–µ—Å–∞
    const shellProfile = [
      new THREE.Vector2(r - 0.45, -h * 0.92),
      new THREE.Vector2(r + 0.04, -h * 0.98),
      new THREE.Vector2(R - 0.95, -h * 0.94),
      new THREE.Vector2(R - 0.6, -h * 0.68),
      new THREE.Vector2(R - 0.18, -h * 0.32),
      new THREE.Vector2(R + 0.18, -h * 0.06),
      new THREE.Vector2(R + 0.28, 0),
      new THREE.Vector2(R + 0.18, h * 0.06),
      new THREE.Vector2(R - 0.18, h * 0.32),
      new THREE.Vector2(R - 0.6, h * 0.68),
      new THREE.Vector2(R - 0.95, h * 0.94),
      new THREE.Vector2(r + 0.04, h * 0.98),
      new THREE.Vector2(r - 0.45, h * 0.92),
      new THREE.Vector2(r - 0.58, 0)
    ];

    // üé® PBR-–º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∫–æ—Ä–ø—É—Å–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å—é
    const shellMaterial = new THREE.MeshStandardMaterial({ 
      color: 0x3a0d0d,
      metalness: 0.9,      // –£—Å–∏–ª–µ–Ω –º–µ—Ç–∞–ª–ª
      roughness: 0.35,     // –°–Ω–∏–∂–µ–Ω–∞ —à–µ—Ä–æ—Ö–æ–≤–∞—Ç–æ—Å—Ç—å
      emissive: 0x1a0303,  // –£—Å–∏–ª–µ–Ω–æ —Å–≤–µ—á–µ–Ω–∏–µ
      emissiveIntensity: 0.4,
      envMapIntensity: 1.5 // –û—Ç—Ä–∞–∂–µ–Ω–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
    });
    
    const shell = new THREE.Mesh(
      new THREE.LatheGeometry(shellProfile, 240),
      shellMaterial
    );
    shell.rotation.x = Math.PI / 2;
    shell.castShadow = true;
    shell.receiveShadow = true;
    this.root.add(shell);

    // –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (lip —É–¥–∞–ª—ë–Ω - –º–µ–¥–Ω–æ–µ –∫–æ–ª—å—Ü–æ)
    // const lip = new THREE.Mesh(
    //   new THREE.TorusGeometry(R - 0.22, 0.12, 48, 200),
    //   new THREE.MeshStandardMaterial({ color: 0xffc99d, metalness: 0.85, roughness: 0.18, emissive: 0x3f1102 })
    // );
    // lip.rotation.x = Math.PI / 2;
    // lip.position.z = h * 0.58;
    // lip.castShadow = true;
    // this.root.add(lip);

    const facePlate = new THREE.Mesh(
      new THREE.CircleGeometry(R - 0.48, 180),
      new THREE.MeshStandardMaterial({ color: 0x190303, metalness: 0.38, roughness: 0.78, emissive: 0x050000 })
    );
    facePlate.position.z = h * 0.42;
    facePlate.receiveShadow = true;
    this.root.add(facePlate);

    const brassRing = new THREE.Mesh(
      new THREE.RingGeometry(r - 0.08, r + 0.32, 180),
      new THREE.MeshStandardMaterial({ 
        color: 0xffbb77,       // –ó–æ–ª–æ—Ç–∏—Å—Ç—ã–π
        metalness: 0.85,       // –ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π
        roughness: 0.25,       // –ü–æ–ª—É-–≥–ª—è–Ω—Ü–µ–≤—ã–π
        emissive: 0x663311,    // –¢—ë–ø–ª–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ
        emissiveIntensity: 0.3, // –õ–µ–≥–∫–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ
        side: THREE.DoubleSide
      })
    );
    brassRing.position.z = h * 0.45;
    this.root.add(brassRing);

    const hubGem = new THREE.Mesh(
      new THREE.SphereGeometry(r * 0.7, 64, 32),
      new THREE.MeshStandardMaterial({ 
        color: 0x991515,       // –¢—ë–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π
        metalness: 0.6,        // –£–º–µ—Ä–µ–Ω–Ω—ã–π –º–µ—Ç–∞–ª–ª
        roughness: 0.4,        // –ú–∞—Ç–æ–≤—ã–π –∫–∞–º–µ–Ω—å
        emissive: 0x440000,    // –¢—ë–º–Ω–æ-–∫—Ä–∞—Å–Ω–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ
        emissiveIntensity: 0.8, // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ–≥–æ–Ω—å
        envMapIntensity: 2.2   // –û—Ç—Ä–∞–∂–µ–Ω–∏—è HDR
      })
    );
    hubGem.scale.set(1, 1, 0.56);
    hubGem.position.z = h * 0.63;
    hubGem.castShadow = true;
    this.root.add(hubGem);

    // –ì—Ä—É–ø–ø—ã –¥–ª—è —Å–µ–∫—Ç–æ—Ä–æ–≤
    this.segmentGroup = new THREE.Group();
    this.segmentGroup.position.z = h * 0.32;
    this.root.add(this.segmentGroup);

    this.dividerGroup = new THREE.Group();
    this.dividerGroup.position.z = this.segmentGroup.position.z + this.segmentHeight / 2 + 0.12;
    this.root.add(this.dividerGroup);

    this.labelGroup = new THREE.Group();
    this.labelGroup.position.z = this.dividerGroup.position.z + 0.48;
    this.root.add(this.labelGroup);

    // –ü—å–µ–¥–µ—Å—Ç–∞–ª
    const pedestal = new THREE.Mesh(
      new THREE.CylinderGeometry(R * 0.58, R * 0.92, 3.2, 64),
      new THREE.MeshStandardMaterial({ color: 0x120101, metalness: 0.26, roughness: 0.94, emissive: 0x030000 })
    );
    pedestal.position.set(0, -R - 1.4, -1.0);
    pedestal.castShadow = true;
    this.scene.add(pedestal);

    const floor = new THREE.Mesh(
      new THREE.CircleGeometry(R * 1.7, 120),
      new THREE.MeshStandardMaterial({ color: 0x080101, metalness: 0.12, roughness: 0.98, emissive: 0x010000 })
    );
    floor.rotation.x = -Math.PI / 2;
    floor.position.set(0, -R - 1.9, -1.1);
    floor.receiveShadow = true;
    this.scene.add(floor);

    // –£–∫–∞–∑–∞—Ç–µ–ª—å - –∑–æ–ª–æ—Ç–∞—è —Å—Ç—Ä–µ–ª–∫–∞
    this.pointerGroup = new THREE.Group();
    this.pointerGroup.position.set(0, R + 0.62, this.dividerGroup.position.z + 0.12);
    this.scene.add(this.pointerGroup);

    const pointerTip = new THREE.Mesh(
      new THREE.ConeGeometry(0.3, 0.72, 32),
      new THREE.MeshStandardMaterial({ 
        color: 0xffcc88,       // –ó–æ–ª–æ—Ç–∏—Å—Ç—ã–π
        metalness: 0.8,        // –ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π
        roughness: 0.3,        // –ü–æ–ª—É-–≥–ª—è–Ω—Ü–µ–≤—ã–π
        emissive: 0x885533,    // –¢—ë–ø–ª–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ
        emissiveIntensity: 0.4 // –õ–µ–≥–∫–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ
      })
    );
    pointerTip.position.y = -1.2;
    pointerTip.rotation.x = Math.PI;
    pointerTip.castShadow = true;
    this.pointerGroup.add(pointerTip);

    const pointerRod = new THREE.Mesh(
      new THREE.CylinderGeometry(0.08, 0.08, 1.5, 16),
      new THREE.MeshStandardMaterial({ 
        color: 0xddaa77,       // –ó–æ–ª–æ—Ç–∏—Å—Ç–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π
        metalness: 0.7,        // –ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π
        roughness: 0.35,       // –ü–æ–ª—É-–º–∞—Ç–æ–≤—ã–π
        emissive: 0x664422,    // –¢—ë–ø–ª–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ
        emissiveIntensity: 0.3 // –õ–µ–≥–∫–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ
      })
    );
    pointerRod.position.y = -0.4;
    pointerRod.castShadow = true;
    this.pointerGroup.add(pointerRod);

    this.pointerAngle = Math.atan2(this.pointerGroup.position.y, this.pointerGroup.position.x);

    this._setupSwipeHandlers();

    this._rebuildSectors();

    if (!this.isSpinning && this.segmentCount > 0) {
      this.currentPointerIndex = this._indexAtPointer(this.currentAngle);
    }
    
    // üî• –°–æ–∑–¥–∞—ë–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ—Å–ª–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–æ–ª–µ—Å–∞
    if (this._effectsToInit) {
      this.fireTrail = new this._effectsToInit.FireTrail(this.scene, this.pointerGroup);
      this.lightning = new this._effectsToInit.Lightning(this.scene, this.root);
      this.comet = new this._effectsToInit.Comet(this.scene);
      this.fallingStars = new this._effectsToInit.FallingStars(this.scene);
      delete this._effectsToInit; // –û—á–∏—â–∞–µ–º, –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã
    }
  }

  // üé¨ –≠—Ñ—Ñ–µ–∫—Ç–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –≤—Ö–æ–¥–∞ –∫–æ–ª–µ—Å–∞
  _playEntranceAnimation() {
    if (!this.root) return;
    
    // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –∫–æ–ª–µ—Å–æ —Å–Ω–∏–∑—É –∏ –Ω–µ–≤–∏–¥–∏–º–æ
    this.root.position.y = -15;
    this.root.scale.set(0.3, 0.3, 0.3);
    this.root.rotation.x = Math.PI * 0.3;
    
    if (this.embers) this.embers.visible = false;
    if (this.starDust) this.starDust.visible = false;
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏
    const duration = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã
    const startTime = Date.now();
    
    const animate = () => {
      const elapsed = Date.now() - startTime;
      const progress = Math.min(elapsed / duration, 1);
      
      // –ü–ª–∞–≤–Ω–∞—è –∫—Ä–∏–≤–∞—è easeOutCubic
      const t = 1 - Math.pow(1 - progress, 3);
      
      // –ü–æ–¥–Ω—è—Ç–∏–µ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
      this.root.position.y = -15 + t * 15;
      this.root.scale.set(0.3 + t * 0.7, 0.3 + t * 0.7, 0.3 + t * 0.7);
      
      // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –≤—Ä–∞—â–µ–Ω–∏—è
      this.root.rotation.x = Math.PI * 0.3 * (1 - t);
      
      // –ù–µ–±–æ–ª—å—à–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –≤–æ–∫—Ä—É–≥ –æ—Å–∏ Z –¥–ª—è –¥—Ä–∞–º–∞—Ç–∏–∑–º–∞
      this.root.rotation.z = Math.sin(t * Math.PI * 2) * 0.2 * (1 - t);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –∞–Ω–∏–º–∞—Ü–∏–∏
      if (progress > 0.5) {
        if (this.embers) this.embers.visible = true;
        if (this.starDust) this.starDust.visible = true;
        if (this.fallingStars) this.fallingStars.active = true;
      }
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–µ—Ç—É –≤ –∫–æ–Ω—Ü–µ
      if (progress > 0.8 && this.comet && !this._entranceCometFired) {
        this.comet.trigger();
        this._entranceCometFired = true;
      }
      
      if (progress < 1) {
        requestAnimationFrame(animate);
      } else {
        // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.root.position.y = 0;
        this.root.scale.set(1, 1, 1);
        this.root.rotation.x = 0;
        this.root.rotation.z = 0;
      }
    };
    
    animate();
  }

  _rebuildSectors() {
    this._clearGroup(this.segmentGroup);
    this._clearGroup(this.dividerGroup);
    this._clearGroup(this.labelGroup);

    const N = this.segmentCount;
    if (!N) {
      this.segmentGroup.visible = false;
      this.labelGroup.visible = false;
      this.dividerGroup.visible = false;
      this.pointerGroup.visible = false;
      return;
    }

    this.segmentGroup.visible = true;
    this.labelGroup.visible = true;
    this.dividerGroup.visible = true;
    this.pointerGroup.visible = true;

    this.segmentAngle = TAU / N;
    this.anchorOffset = this.pointerAngle - this.segmentAngle / 2;

    for (let i = 0; i < N; i++) {
      const start = this.anchorOffset + i * this.segmentAngle;
      const end = start + this.segmentAngle;
      const color = SEGMENT_COLORS[i % SEGMENT_COLORS.length];
      
      // –°–µ–∫—Ç–æ—Ä
      const segment = this._createSegmentMesh(start, end, color);
      segment.userData.index = i;
      this.segmentGroup.add(segment);

      // –ú–µ—Ç–∫–∞
      const labelText = this.labels[i] || `–í–∞—Ä–∏–∞–Ω—Ç ${i + 1}`;
      const label = this._createLabelSprite(labelText);
      const mid = start + this.segmentAngle / 2;
      label.position.set(Math.cos(mid) * (this.labelRadius - 0.1), Math.sin(mid) * (this.labelRadius - 0.1), 0);
      label.userData.baseScale = { x: label.scale.x, y: label.scale.y };
      label.userData.index = i;
      this.labelGroup.add(label);

      // –ó—É–±–µ—Ü
      const dividerSize = N <= 3 ? 0.25 : N <= 5 ? 0.2 : 0.15;
      const dividerHeight = N <= 3 ? 0.6 : N <= 5 ? 0.5 : 0.4;
      const divider = this._createDividerMesh(end, dividerSize, dividerHeight);
      divider.userData.index = i;
      divider.userData.angle = end;
      this.dividerGroup.add(divider);
    }
  }

  _createSegmentMesh(start, end, hexColor) {
    const inner = this.innerRadius + 0.38;
    const outer = this.outerRadius - 0.48;

    const shape = new THREE.Shape();
    shape.moveTo(Math.cos(start) * inner, Math.sin(start) * inner);
    shape.absarc(0, 0, outer, start, end, false);
    shape.lineTo(Math.cos(end) * inner, Math.sin(end) * inner);
    shape.absarc(0, 0, inner, end, start, true);
    shape.closePath();

    const geometry = new THREE.ExtrudeGeometry(shape, {
      depth: this.segmentHeight,
      bevelEnabled: true,
      bevelThickness: 0.2,    // –£—Å–∏–ª–µ–Ω bevel
      bevelSize: 0.15,        // –ë–æ–ª—å—à–µ bevel
      bevelSegments: 6,       // –ë–æ–ª—å—à–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
      curveSegments: 80       // –ë–æ–ª–µ–µ –ø–ª–∞–≤–Ω—ã–π
    });
    geometry.translate(0, 0, -this.segmentHeight / 2);

    // üî• –Ø–†–ö–ò–ï –¶–í–ï–¢–ê –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ - –º–∞—Ç–æ–≤—ã–µ, –Ω–µ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ
    const baseColor = new THREE.Color(hexColor);
    const material = new THREE.MeshStandardMaterial({
      color: baseColor.clone(),
      roughness: 0.65,        // –ë–æ–ª–µ–µ –º–∞—Ç–æ–≤—ã–π (–Ω–µ –∑–µ—Ä–∫–∞–ª–æ)
      metalness: 0.25,        // –ú–µ–Ω–µ–µ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π
      emissive: baseColor.clone().multiplyScalar(0.15), // –õ–µ–≥–∫–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ
      emissiveIntensity: 0.6, // –£–º–µ—Ä–µ–Ω–Ω–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ
      side: THREE.DoubleSide
    });

    const mesh = new THREE.Mesh(geometry, material);
    mesh.castShadow = true;
    mesh.receiveShadow = true;
    mesh.userData.baseColor = baseColor;
    mesh.userData.baseEmissive = material.emissive.clone();

    return mesh;
  }

  _createDividerMesh(angle, size = 0.15, height = 0.4) {
    // üî• –ó–û–õ–û–¢–´–ï –ó–£–ë–¶–´ –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
    const cone = new THREE.Mesh(
      new THREE.ConeGeometry(size, height * 1.1, 12), // –ü–ª–∞–≤–Ω—ã–µ –∫–æ–Ω—É—Å—ã
      new THREE.MeshStandardMaterial({
        color: 0xffcc88,      // –ó–æ–ª–æ—Ç–∏—Å—Ç—ã–π
        metalness: 0.75,      // –ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π
        roughness: 0.35,      // –ü–æ–ª—É-–≥–ª—è–Ω—Ü–µ–≤—ã–π
        emissive: 0xbb6633,   // –¢—ë–ø–ª–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ
        emissiveIntensity: 0.4, // –õ–µ–≥–∫–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ
        envMapIntensity: 2.5  // –°–∏–ª—å–Ω—ã–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏—è
      })
    );
    
    const r = this.outerRadius - 0.3;
    cone.position.set(Math.cos(angle) * r, Math.sin(angle) * r, 0);
    cone.lookAt(0, 0, 0);
    cone.castShadow = true;
    
    return cone;
  }

  _createLabelSprite(text) {
    // –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ 9 —Å–∏–º–≤–æ–ª–æ–≤ + –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ
    const maxLength = 9;
    if (text.length > maxLength) {
      text = text.substring(0, maxLength) + '...';
    }
    
    const size = 1024;
    const canvas = document.createElement('canvas');
    canvas.width = canvas.height = size;
    const ctx = canvas.getContext('2d', { alpha: true });
    
    const fontSize = 170; // –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
    ctx.font = `bold ${fontSize}px Arial, sans-serif`;
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    
    const centerX = size / 2;
    const centerY = size / 2;
    
    // –û–±–≤–æ–¥–∫–∞
    ctx.strokeStyle = '#000000';
    ctx.lineWidth = fontSize / 8;
    ctx.strokeText(text, centerX, centerY);
    
    ctx.strokeStyle = '#ff4422';
    ctx.lineWidth = fontSize / 12;
    ctx.strokeText(text, centerX, centerY);
    
    // –¢–µ–∫—Å—Ç
    ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';
    ctx.shadowBlur = fontSize / 10;
    ctx.shadowOffsetX = fontSize / 30;
    ctx.shadowOffsetY = fontSize / 30;
    
    ctx.fillStyle = '#ffffff';
    ctx.fillText(text, centerX, centerY);

    const texture = new THREE.CanvasTexture(canvas);
    texture.minFilter = THREE.LinearFilter;
    texture.magFilter = THREE.LinearFilter;
    texture.generateMipmaps = false;
    texture.needsUpdate = true;
    
    const material = new THREE.SpriteMaterial({ 
      map: texture, 
      transparent: true, 
      depthTest: false, 
      depthWrite: false, 
      opacity: 1.0
    });
    
    const sprite = new THREE.Sprite(material);
    const baseScale = this.segmentCount <= 8 ? 2.2 : 
                     this.segmentCount <= 12 ? 1.8 : 
                     this.segmentCount <= 16 ? 1.5 : 1.3;
    
    sprite.scale.set(baseScale, baseScale * 0.5, 1);
    
    return sprite;
  }

  _clearGroup(group) {
    if (!group) return;
    while (group.children.length) {
      const child = group.children.pop();
      group.remove(child);
      if (child.geometry) child.geometry.dispose();
      if (child.material) {
        if (child.material.map) child.material.map.dispose();
        child.material.dispose();
      }
    }
  }

  _createVictoryModal() {
    // –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const modal = document.createElement('div');
    modal.className = 'victory-modal';
    modal.innerHTML = `
      <div class="victory-modal-backdrop"></div>
      <div class="victory-modal-content">
        <div class="victory-modal-decorations"></div>
        <div class="victory-modal-flame"></div>
        <h2 class="victory-modal-title">–í–µ—Ä–¥–∏–∫—Ç –ü—Ä–µ–∏—Å–ø–æ–¥–Ω–µ–π</h2>
        <div class="victory-modal-result" id="modalResult">‚Äî</div>
        <p class="victory-modal-phrase" id="modalPhrase">‚Äî</p>
        <div class="victory-modal-buttons">
          <button class="victory-modal-reject" id="modalReject">–û—Ç–≤–µ—Ä–≥–Ω—É—Ç—å –ø—Ä–∏–≥–æ–≤–æ—Ä</button>
          <button class="victory-modal-close" id="modalClose">–ü—Ä–∏–Ω—è—Ç—å —Å—É–¥—å–±—É</button>
        </div>
        <div class="victory-modal-hint">–ù–∞–∂–º–∏—Ç–µ ENTER –∏–ª–∏ ESC</div>
      </div>
    `;
    
    document.body.appendChild(modal);
    this.victoryModal = modal;
    this.fateTemptationEnabled = false; // –§–ª–∞–≥ –¥–ª—è —Ä–µ–∂–∏–º–∞ "–ò—Å–∫—É—à–µ–Ω–∏–µ —Å—É–¥—å–±–æ–π"
    this.canRejectFate = false; // –ú–æ–∂–Ω–æ –ª–∏ –æ—Ç–≤–µ—Ä–≥–Ω—É—Ç—å –ø—Ä–∏–≥–æ–≤–æ—Ä
    this.isReSpin = false; // –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –ø–µ—Ä–µ–∫—Ä—É—Ç–æ–º
    this.pendingEliminationLabel = null; // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
    const closeBtn = modal.querySelector('#modalClose');
    const rejectBtn = modal.querySelector('#modalReject');
    const backdrop = modal.querySelector('.victory-modal-backdrop');
    
    const closeModal = () => {
      modal.classList.remove('active');
      this.canRejectFate = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
      
      // –¢–ï–ü–ï–†–¨ —É–¥–∞–ª—è–µ–º —Å–µ–∫—Ç–æ—Ä –µ—Å–ª–∏ —Ä–µ–∂–∏–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω
      if (this.pendingEliminationLabel && this.ui) {
        this.ui.eliminateSector(this.pendingEliminationLabel);
        this.pendingEliminationLabel = null;
      }
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
      setTimeout(() => {
        this._clearVictoryEffects();
      }, 1000);
    };
    
    const rejectFate = () => {
      if (!this.canRejectFate) return;
      
      modal.classList.remove('active');
      this.canRejectFate = false; // –ë–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –æ—Ç–≤–µ—Ä–≥–Ω—É—Ç—å
      
      // –ù–ï —É–¥–∞–ª—è–µ–º —Å–µ–∫—Ç–æ—Ä –ø—Ä–∏ –ø–µ—Ä–µ–∫—Ä—É—Ç–∫–µ!
      this.pendingEliminationLabel = null;
      
      // –û—á–∏—â–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
      setTimeout(() => {
        this._clearVictoryEffects();
      }, 300);
      
      // –ë–ª–æ–∫–∏—Ä—É–µ–º UI –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∫—Ä—É—Ç–∫–æ–π
      if (this.ui && this.ui.setSpinning) {
        this.ui.setSpinning(true);
      }
      
      // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —á–µ–∫–±–æ–∫—Å fate –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∫—Ä—É—Ç–∫–æ–π
      if (this.ui && this.ui.unlockFateCheckbox) {
        this.ui.unlockFateCheckbox();
      }
      
      // –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–∞—â–µ–Ω–∏–µ - –ø–µ—Ä–µ–∫—Ä—É—Ç–∫–∞
      this.isReSpin = true;
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–ª–µ—Å–æ –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
      setTimeout(() => {
        this.spin();
      }, 600);
    };
    
    closeBtn.addEventListener('click', closeModal);
    rejectBtn.addEventListener('click', rejectFate);
    backdrop.addEventListener('click', closeModal);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const handleModalKeydown = (e) => {
      // –ï—Å–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
      if (!modal.classList.contains('active')) return;
      
      if (e.key === 'Enter') {
        e.preventDefault();
        // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ "–û—Ç–≤–µ—Ä–≥–Ω—É—Ç—å –ø—Ä–∏–≥–æ–≤–æ—Ä" –≤–∏–¥–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–∞–∂–∏–º–∞–µ–º –µ—ë
        if (rejectBtn.style.display !== 'none' && this.canRejectFate) {
          rejectFate();
        } else {
          // –ò–Ω–∞—á–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
          closeModal();
        }
      } else if (e.key === 'Escape') {
        e.preventDefault();
        closeModal();
      }
    };
    
    window.addEventListener('keydown', handleModalKeydown);
  }
  
  setFateTemptation(enabled) {
    this.fateTemptationEnabled = enabled;
  }
  
  setUI(ui) {
    this.ui = ui;
  }
  

  _showVictoryModal(label) {
    if (!this.victoryModal) return;
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É
    const randomPhrase = this.hellPhrases[Math.floor(Math.random() * this.hellPhrases.length)];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    const resultEl = this.victoryModal.querySelector('#modalResult');
    const phraseEl = this.victoryModal.querySelector('#modalPhrase');
    const rejectBtn = this.victoryModal.querySelector('#modalReject');
    const closeBtn = this.victoryModal.querySelector('#modalClose');
    
    resultEl.textContent = label;
    phraseEl.textContent = randomPhrase;
    
    // –£–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å—é –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ä–≥–Ω—É—Ç—å –ø—Ä–∏–≥–æ–≤–æ—Ä"
    if (this.fateTemptationEnabled && this.canRejectFate) {
      rejectBtn.style.display = 'inline-block';
      
      // –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–Ω—è—Ç—å" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
      const isEliminationMode = this.ui && this.ui.eliminationMode;
      if (isEliminationMode) {
        closeBtn.textContent = '‚úì –ü—Ä–∏–Ω—è—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å';
        closeBtn.title = '–°–µ–∫—Ç–æ—Ä –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞';
      } else {
        closeBtn.textContent = '–ü—Ä–∏–Ω—è—Ç—å —Å—É–¥—å–±—É';
        closeBtn.title = '';
      }
    } else {
      rejectBtn.style.display = 'none';
      closeBtn.textContent = '–ü—Ä–∏–Ω—è—Ç—å —Å—É–¥—å–±—É';
      closeBtn.title = '';
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –°–†–ê–ó–£ –ë–ï–ó –ó–ê–î–ï–†–ñ–ö–ò –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
    this.victoryModal.classList.add('active');
  }

  _highlightSector(index) {
    if (!this.segmentGroup || index < 0 || index >= this.segmentCount) return;
    
    this.segmentGroup.children.forEach((child, idx) => {
      const mat = child.material;
      if (!mat) return;
      const baseColor = child.userData?.baseColor;
      const baseEmissive = child.userData?.baseEmissive;
      
      if (idx === index) {
        mat.color = new THREE.Color(0xff9a62);
        mat.emissive = new THREE.Color(0xff6a42);
        mat.emissiveIntensity = 0.8;
      } else {
        if (baseColor) mat.color.copy(baseColor).multiplyScalar(0.5);
        if (baseEmissive) mat.emissive.copy(baseEmissive).multiplyScalar(0.3);
      }
    });
    
    this.labelGroup?.children.forEach((sprite, idx) => {
      if (!(sprite instanceof THREE.Sprite)) return;
      const mat = sprite.material;
      const base = sprite.userData?.baseScale;
      
      if (idx === index) {
        if (mat) mat.opacity = 1;
        if (base) sprite.scale.set(base.x * 1.3, base.y * 1.3, 1);
      } else {
        if (mat) mat.opacity = 0.4;
        if (base) sprite.scale.set(base.x * 0.8, base.y * 0.8, 1);
      }
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ–±–µ–¥—ã
    this._createVictoryEffects(index);
    
    // –ü—É–ª—å—Å–∞—Ü–∏—è
    let pulseCount = 0;
    const pulseInterval = setInterval(() => {
      pulseCount++;
      if (pulseCount > 6) {
        clearInterval(pulseInterval);
        return;
      }
      
      const sector = this.segmentGroup.children[index];
      if (sector?.material) {
        sector.material.emissiveIntensity = pulseCount % 2 === 0 ? 0.8 : 0.4;
      }
    }, 200);
  }

  _createVictoryEffects(index) {
    // 1. –û–≥–Ω–µ–Ω–Ω–æ–µ –∫–æ–ª—å—Ü–æ –≤–æ–∫—Ä—É–≥ –∫–æ–ª–µ—Å–∞
    const ringGeometry = new THREE.TorusGeometry(this.outerRadius + 0.5, 0.2, 16, 100);
    const ringMaterial = new THREE.MeshStandardMaterial({
      color: 0xff4400,
      emissive: 0xff6600,
      emissiveIntensity: 2,
      transparent: true,
      opacity: 0
    });
    this.fireRing = new THREE.Mesh(ringGeometry, ringMaterial);
    this.fireRing.rotation.x = Math.PI / 2;
    this.fireRing.position.z = this.segmentHeight;
    this.scene.add(this.fireRing);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–ª—å—Ü–∞
    const ringAnimation = setInterval(() => {
      if (this.fireRing.material.opacity < 0.8) {
        this.fireRing.material.opacity += 0.05;
        this.fireRing.scale.set(
          1 + Math.sin(Date.now() * 0.01) * 0.05,
          1 + Math.sin(Date.now() * 0.01) * 0.05,
          1
        );
      } else {
        clearInterval(ringAnimation);
      }
    }, 30);
    
    // 2. –í–∑—Ä—ã–≤ —á–∞—Å—Ç–∏—Ü
    const particleCount = 100;
    const explosionGeometry = new THREE.BufferGeometry();
    const explosionPositions = new Float32Array(particleCount * 3);
    const explosionVelocities = [];
    
    const sectorAngle = this.anchorOffset + index * this.segmentAngle + this.segmentAngle / 2;
    const centerX = Math.cos(sectorAngle) * this.labelRadius;
    const centerY = Math.sin(sectorAngle) * this.labelRadius;
    
    for (let i = 0; i < particleCount; i++) {
      explosionPositions[i * 3] = centerX;
      explosionPositions[i * 3 + 1] = centerY;
      explosionPositions[i * 3 + 2] = this.segmentHeight;
      
      const angle = Math.random() * TAU;
      const speed = 0.1 + Math.random() * 0.3;
      explosionVelocities.push({
        x: Math.cos(angle) * speed,
        y: Math.sin(angle) * speed,
        z: Math.random() * 0.2
      });
    }
    
    explosionGeometry.setAttribute('position', new THREE.BufferAttribute(explosionPositions, 3));
    
    const explosionMaterial = new THREE.PointsMaterial({
      color: 0xff6600,
      size: 0.3,
      transparent: true,
      blending: THREE.AdditiveBlending,
      depthWrite: false,
      opacity: 1
    });
    
    const explosion = new THREE.Points(explosionGeometry, explosionMaterial);
    this.root.add(explosion);
    this.victoryEffects.push({ mesh: explosion, velocities: explosionVelocities, life: 1.0 });
    
    // 3. –°–≤–µ—Ç–æ–≤—ã–µ –ª—É—á–∏
    const rayCount = 8;
    for (let i = 0; i < rayCount; i++) {
      const rayAngle = sectorAngle + (TAU / rayCount) * i;
      const rayGeometry = new THREE.PlaneGeometry(0.1, 8);
      const rayMaterial = new THREE.MeshBasicMaterial({
        color: 0xffaa44,
        transparent: true,
        opacity: 0.6,
        side: THREE.DoubleSide,
        blending: THREE.AdditiveBlending
      });
      
      const ray = new THREE.Mesh(rayGeometry, rayMaterial);
      ray.position.set(
        Math.cos(rayAngle) * (this.outerRadius * 0.7),
        Math.sin(rayAngle) * (this.outerRadius * 0.7),
        this.segmentHeight + 0.5
      );
      ray.rotation.z = rayAngle + Math.PI / 2;
      
      this.root.add(ray);
      this.victoryEffects.push({ 
        mesh: ray, 
        type: 'ray',
        baseOpacity: 0.6,
        angle: rayAngle 
      });
    }
    
    // 4. –£–≤–µ–ª–∏—á–µ–Ω–∏–µ bloom —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ
    const originalBloom = this.bloomPass.strength;
    this.bloomPass.strength = 1.5;
    setTimeout(() => {
      this.bloomPass.strength = originalBloom;
    }, 2000);
    
    // 5. –í—Å–ø—ã—à–∫–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    this._createScreenFlash();
    
    // 6. –î—Ä–æ–∂–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã
    this._shakeCamera();
  }
  
  _createScreenFlash() {
    const flash = document.createElement('div');
    flash.style.position = 'fixed';
    flash.style.top = '0';
    flash.style.left = '0';
    flash.style.width = '100%';
    flash.style.height = '100%';
    flash.style.background = 'radial-gradient(circle, rgba(255,200,100,0.4), rgba(255,100,0,0.2), transparent 70%)';
    flash.style.pointerEvents = 'none';
    flash.style.zIndex = '9999';
    flash.style.opacity = '0';
    flash.style.mixBlendMode = 'screen';
    document.body.appendChild(flash);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –≤—Å–ø—ã—à–∫–∏
    flash.style.transition = 'opacity 0.2s ease-in';
    setTimeout(() => flash.style.opacity = '1', 10);
    setTimeout(() => {
      flash.style.transition = 'opacity 0.8s ease-out';
      flash.style.opacity = '0';
    }, 200);
    setTimeout(() => document.body.removeChild(flash), 1200);
  }
  
  _shakeCamera() {
    const originalPosition = this.camera.position.clone();
    const shakeIntensity = 0.2;
    const shakeDuration = 800;
    const startTime = Date.now();
    
    const shake = () => {
      const elapsed = Date.now() - startTime;
      if (elapsed < shakeDuration) {
        const progress = 1 - (elapsed / shakeDuration);
        this.camera.position.x = originalPosition.x + (Math.random() - 0.5) * shakeIntensity * progress;
        this.camera.position.y = originalPosition.y + (Math.random() - 0.5) * shakeIntensity * progress;
        requestAnimationFrame(shake);
      } else {
        this.camera.position.copy(originalPosition);
      }
    };
    shake();
  }
  
  _clearVictoryEffects() {
    // –£–¥–∞–ª—è–µ–º –æ–≥–Ω–µ–Ω–Ω–æ–µ –∫–æ–ª—å—Ü–æ
    if (this.fireRing) {
      this.scene.remove(this.fireRing);
      if (this.fireRing.geometry) this.fireRing.geometry.dispose();
      if (this.fireRing.material) this.fireRing.material.dispose();
      this.fireRing = null;
    }
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ–±–µ–¥—ã
    this.victoryEffects.forEach(effect => {
      if (effect.mesh.parent) {
        effect.mesh.parent.remove(effect.mesh);
      }
      if (effect.mesh.geometry) effect.mesh.geometry.dispose();
      if (effect.mesh.material) effect.mesh.material.dispose();
    });
    this.victoryEffects = [];
  }
  
  _updateVictoryEffects(dt) {
    // –ê–Ω–∏–º–∞—Ü–∏—è –æ–≥–Ω–µ–Ω–Ω–æ–≥–æ –∫–æ–ª—å—Ü–∞
    if (this.fireRing) {
      this.fireRing.rotation.z += dt * 0.5;
      this.fireRing.material.emissiveIntensity = 2 + Math.sin(Date.now() * 0.005) * 0.5;
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    this.victoryEffects = this.victoryEffects.filter(effect => {
      if (effect.type === 'ray') {
        // –ê–Ω–∏–º–∞—Ü–∏—è –ª—É—á–µ–π
        effect.mesh.material.opacity = effect.baseOpacity * (0.5 + Math.sin(Date.now() * 0.01) * 0.5);
        effect.mesh.scale.y = 1 + Math.sin(Date.now() * 0.005) * 0.2;
        return true;
      } else if (effect.velocities) {
        // –ê–Ω–∏–º–∞—Ü–∏—è –≤–∑—Ä—ã–≤–∞ —á–∞—Å—Ç–∏—Ü
        const positions = effect.mesh.geometry.attributes.position.array;
        effect.velocities.forEach((vel, i) => {
          positions[i * 3] += vel.x * dt * 60;
          positions[i * 3 + 1] += vel.y * dt * 60;
          positions[i * 3 + 2] += vel.z * dt * 60;
        });
        effect.mesh.geometry.attributes.position.needsUpdate = true;
        
        effect.life -= dt;
        effect.mesh.material.opacity = Math.max(0, effect.life);
        
        if (effect.life <= 0) {
          effect.mesh.parent.remove(effect.mesh);
          if (effect.mesh.geometry) effect.mesh.geometry.dispose();
          if (effect.mesh.material) effect.mesh.material.dispose();
          return false;
        }
      }
      return true;
    });
  }

  _triggerPointerHit(velocity) {
    if (!this.onHit) return;
    const intensity = Math.min(1, Math.abs(velocity) / 12);
    this.onHit(intensity);
  }



  _pickRandomIndex() {
    if (!this.segmentCount) return 0;
    return this._randomInt(0, this.segmentCount);
  }

  _angleForIndex(index) {
    if (!this.segmentCount) return 0;
    const total = this.segmentCount;
    const clamped = ((index % total) + total) % total;
    const centerOffset = this.pointerAngle - this.anchorOffset - (clamped + 0.5) * this.segmentAngle;
    return this._normalizePositive(centerOffset);
  }

  _sectorCenterAngle(index, rotationOffset = 0) {
    return this.anchorOffset + (index + 0.5) * this.segmentAngle + rotationOffset;
  }

  _angularDifference(a, b) {
    const diff = ((a - b + Math.PI) % TAU + TAU) % TAU - Math.PI;
    return diff;
  }

  _indexAtPointer(rotationAngle) {
    if (!this.segmentCount) return 0;
    const pointerWorldAngle = this.pointerAngle;
    let closestIndex = 0;
    let smallest = Infinity;
    for (let i = 0; i < this.segmentCount; i++) {
      const center = this._sectorCenterAngle(i, rotationAngle);
      const diff = Math.abs(this._angularDifference(center, pointerWorldAngle));
      if (diff < smallest) {
        smallest = diff;
        closestIndex = i;
      }
    }
    return closestIndex;
  }

  _indexFromAngle(angle) {
    if (!this.segmentCount) return 0;
    const pointerAngle = Math.PI / 2;
    const normalized = ((pointerAngle - angle - this.anchorOffset) % TAU + TAU) % TAU;
    return Math.floor(normalized / this.segmentAngle) % this.segmentCount;
  }

  _bouncePointer() {
    if (!this.pointerGroup) return;
    if (this.pointerTimeout) clearTimeout(this.pointerTimeout);
    
    const velocity = Math.abs(this.physics.vel);
    const direction = this.physics.vel > 0 ? -1 : 1;
    
    let bounceAngle = 0.15;
    let bounceTime = 120;
    
    if (velocity > 5) {
      bounceAngle = 0.25;
      bounceTime = 80;
    } else if (velocity > 2) {
      bounceAngle = 0.20;
      bounceTime = 100;
    }
    
    this.pointerGroup.rotation.z = bounceAngle * direction;
    
    this.pointerTimeout = setTimeout(() => {
      this.pointerGroup.rotation.z = -bounceAngle * direction * 0.3;
      setTimeout(() => {
        this.pointerGroup.rotation.z = 0;
      }, bounceTime / 2);
    }, bounceTime);
  }

  // ‚úÖ –ò–ù–ï–†–¶–ò–Ø –£–ö–ê–ó–ê–¢–ï–õ–Ø - —Å—Ç—Ä–µ–ª–∫–∞ –æ—Ç—Å—Ç–∞—ë—Ç –æ—Ç –∫–æ–ª–µ—Å–∞ –Ω–∞ –≤—ã—Å–æ–∫–∏—Ö —Å–∫–æ—Ä–æ—Å—Ç—è—Ö
  _updatePointerInertia(dt) {
    if (!this.pointerGroup || !this.isSpinning) return;
    
    const velocity = this.physics.vel;
    
    // –¶–µ–ª–µ–≤–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ —É–∫–∞–∑–∞—Ç–µ–ª—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∫–æ–ª–µ—Å–∞
    const targetRotation = -velocity * 0.06; // –û—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å–∫–æ—Ä–æ—Å—Ç–∏
    
    // –ü–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–µ–≤–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é (easing)
    this.pointerInertia += (targetRotation - this.pointerInertia) * 0.12;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–Ω–µ—Ä—Ü–∏—é –∫ —É–∫–∞–∑–∞—Ç–µ–ª—é (–ù–ï –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º bounce!)
    if (!this.pointerTimeout) {
      this.pointerGroup.rotation.z = this.pointerInertia;
    }
  }

  // ‚úÖ –°–û–ó–î–ê–ù–ò–ï –ò–°–ö–† –ø—Ä–∏ —É–¥–∞—Ä–µ –æ –∑—É–±–µ—Ü
  _createSparks(position, intensity = 1) {
    if (!this.scene) return;
    
    const sparkCount = Math.floor(8 + intensity * 12); // 8-20 –∏—Å–∫—Ä
    
    for (let i = 0; i < sparkCount; i++) {
      const geometry = new THREE.SphereGeometry(0.08, 4, 4);
      const material = new THREE.MeshBasicMaterial({
        color: new THREE.Color(1, 0.5 + Math.random() * 0.3, 0), // –û—Ä–∞–Ω–∂–µ–≤—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏
        transparent: true,
        opacity: 1
      });
      
      const spark = new THREE.Mesh(geometry, material);
      spark.position.copy(position);
      
      // –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ª–µ—Ç–∞
      const angle = Math.random() * Math.PI * 2;
      const speed = (0.3 + Math.random() * 0.6) * intensity;
      const upwardBias = 0.2 + Math.random() * 0.3; // –ò—Å–∫—Ä—ã –ª–µ—Ç—è—Ç –±–æ–ª—å—à–µ –≤–≤–µ—Ä—Ö
      
      const velocity = new THREE.Vector3(
        Math.cos(angle) * speed,
        upwardBias * speed,
        Math.sin(angle) * speed
      );
      
      this.scene.add(spark);
      
      this.sparkParticles.push({
        mesh: spark,
        velocity: velocity,
        life: 0.6 + Math.random() * 0.4, // 0.6-1.0 —Å–µ–∫—É–Ω–¥ –∂–∏–∑–Ω–∏
        maxLife: 0.6 + Math.random() * 0.4,
        gravity: -1.5 // –ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è
      });
    }
  }

  // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–°–ö–†
  _updateSparks(dt) {
    this.sparkParticles = this.sparkParticles.filter(spark => {
      // –§–∏–∑–∏–∫–∞ —á–∞—Å—Ç–∏—Ü—ã
      spark.velocity.y += spark.gravity * dt;
      spark.mesh.position.x += spark.velocity.x * dt * 60;
      spark.mesh.position.y += spark.velocity.y * dt * 60;
      spark.mesh.position.z += spark.velocity.z * dt * 60;
      
      // –£–º–µ–Ω—å—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏
      spark.life -= dt;
      
      // –ó–∞—Ç—É—Ö–∞–Ω–∏–µ –ø–æ –º–µ—Ä–µ —Å—Ç–∞—Ä–µ–Ω–∏—è
      const ageRatio = spark.life / spark.maxLife;
      spark.mesh.material.opacity = Math.max(0, ageRatio);
      spark.mesh.scale.setScalar(0.5 + ageRatio * 0.5); // –£–º–µ–Ω—å—à–∞—é—Ç—Å—è
      
      // –£–¥–∞–ª–µ–Ω–∏–µ –º—ë—Ä—Ç–≤—ã—Ö –∏—Å–∫—Ä
      if (spark.life <= 0) {
        this.scene.remove(spark.mesh);
        spark.mesh.geometry.dispose();
        spark.mesh.material.dispose();
        return false;
      }
      
      return true;
    });
  }



  _computeSpinDelta(currentAngle, targetAngle, direction, strength = 1) {
    const forward = this._normalizePositive(targetAngle - currentAngle) || TAU;
    const backward = this._normalizePositive(currentAngle - targetAngle) || TAU;
    const minimal = direction >= 0 ? forward : -backward;
    const baseTurns = this._randomRange(3.4, 5.6);
    const strengthFactor = 0.85 + Math.min(1.5, Math.max(0.4, strength)) * 0.3;
    const extraTurns = baseTurns * strengthFactor;
    return minimal + direction * extraTurns * TAU;
  }

  _normalizePositive(value) {
    return ((value % TAU) + TAU) % TAU;
  }

  _randomSign() {
    return this._randomFloat() < 0.5 ? -1 : 1;
  }

  _randomRange(min, max) {
    return min + (max - min) * this._randomFloat();
  }

  _randomInt(min, max) {
    if (max <= min) return min;
    const span = max - min;
    if (typeof crypto !== "undefined" && crypto.getRandomValues) {
      crypto.getRandomValues(this._randBuffer);
      return min + (this._randBuffer[0] % span);
    }
    return min + Math.floor(Math.random() * span);
  }

  // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–´–ô –ö–†–ò–ü–¢–û–°–¢–û–ô–ö–ò–ô –ì–ï–ù–ï–†–ê–¢–û–†
  _randomFloat() {
    if (typeof crypto !== "undefined" && crypto.getRandomValues) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º 4 –±–∞–π—Ç–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç–Ω—Ç—Ä–æ–ø–∏–∏
      const buffer = new Uint8Array(4);
      crypto.getRandomValues(buffer);
      // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º 4 –±–∞–π—Ç–∞ –≤ –æ–¥–Ω–æ 32-–±–∏—Ç–Ω–æ–µ —á–∏—Å–ª–æ
      const num = (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];
      return num / 0xFFFFFFFF; // –î–µ–ª–∏–º –Ω–∞ –º–∞–∫—Å–∏–º—É–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è [0, 1)
    }
    return Math.random();
  }

  _shuffleArray(array) {
    // –ê–ª–≥–æ—Ä–∏—Ç–º –§–∏—à–µ—Ä–∞-–ô–µ—Ç—Å–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞
    const shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = this._randomInt(0, i + 1);
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
  }


  _animate() {
    const clock = new THREE.Clock();
    const animate = () => {
      const dt = Math.min(0.033, clock.getDelta());
      this._updatePhysics(dt);
      this._updateParticles(dt);
      this._updateEmbers(dt);    // üî• –ê–Ω–∏–º–∞—Ü–∏—è —É–≥–ª–µ–π
      this._updateStarDust(dt);  // ‚ú® –í—Ä–∞—â–µ–Ω–∏–µ –∑–≤—ë–∑–¥
      this._updateVictoryEffects(dt);
      this._updatePointerInertia(dt); // ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–µ—Ä—Ü–∏–∏ —É–∫–∞–∑–∞—Ç–µ–ª—è
      
      // üî• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
      if (this.fireTrail) this.fireTrail.update(dt, Math.abs(this.physics.vel));
      if (this.lightning) this.lightning.update(dt, Math.abs(this.physics.vel));
      if (this.comet) this.comet.update(dt);
      if (this.fallingStars) this.fallingStars.update(dt);
      
      // üå™Ô∏è –ó–≤—É–∫ –≤–µ—Ç—Ä–∞ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ (–∫–∞–∂–¥—ã–µ 0.2 —Å–µ–∫—É–Ω–¥—ã)
      if (this.isSpinning && this.audioBus && Math.abs(this.physics.vel) > 3) {
        if (!this._lastWindTime || Date.now() - this._lastWindTime > 200) {
          this.audioBus.playWind(Math.abs(this.physics.vel));
          this._lastWindTime = Date.now();
        }
      }
      
      // üåÄ –°–õ–£–ß–ê–ô–ù–´–ï –≠–§–§–ï–ö–¢–´ –≤ —Ä–µ–∂–∏–º–µ —Ö–∞–æ—Å–∞
      if (this.chaosMode && this.isSpinning && this.audioBus) {
        if (!this._lastChaosEffect || Date.now() - this._lastChaosEffect > 800) {
          if (Math.random() < 0.3) {
            // –°–ª—É—á–∞–π–Ω—ã–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π –≥–ª–∏—Ç—á
            const glitchType = ['boost', 'brake', 'reverse', 'pause'][Math.floor(Math.random() * 4)];
            this._chaosFlash(glitchType);
          }
          if (Math.random() < 0.2) {
            // –°–ª—É—á–∞–π–Ω–∞—è –º–∏–Ω–∏-—Ç—Ä—è—Å–∫–∞
            this._screenShake();
          }
          this._lastChaosEffect = Date.now();
        }
      }
      
      // –ò—Å–∫—Ä—ã —É–±—Ä–∞–Ω—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
      this.composer.render();
      requestAnimationFrame(animate);
    };
    animate();
  }

  _updateParticles(dt) {
    if (!this.particles) return;

    const positions = this.particles.geometry.attributes.position.array;
    const velocities = this.particleVelocities;

    for (let i = 0; i < positions.length / 3; i++) {
      positions[i * 3] += velocities[i * 3] * dt * 60;
      positions[i * 3 + 1] += velocities[i * 3 + 1] * dt * 60;
      positions[i * 3 + 2] += velocities[i * 3 + 2] * dt * 60;

      if (positions[i * 3 + 1] < -2) {
        positions[i * 3 + 1] = 15; // Reset to top
      }
    }

    this.particles.geometry.attributes.position.needsUpdate = true;
  }

  // üî• –ê–Ω–∏–º–∞—Ü–∏—è —Ç–ª–µ—é—â–∏—Ö —É–≥–ª–µ–π
  _updateEmbers(dt) {
    if (!this.embers) return;

    const positions = this.embers.geometry.attributes.position.array;
    const velocities = this.emberVelocities;
    const sizes = this.embers.geometry.attributes.size.array;

    for (let i = 0; i < positions.length / 3; i++) {
      // –î–≤–∏–∂–µ–Ω–∏–µ —É–≥–ª–µ–π
      positions[i * 3] += velocities[i * 3] * dt * 60;
      positions[i * 3 + 1] += velocities[i * 3 + 1] * dt * 60;
      positions[i * 3 + 2] += velocities[i * 3 + 2] * dt * 60;

      // –ú–µ—Ä—Ü–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
      sizes[i] *= 1 + Math.sin(Date.now() * 0.003 + i) * 0.02;

      // –°–±—Ä–æ—Å –≤—ã—Å–æ–∫–æ –ø–æ–¥–Ω—è–≤—à–∏—Ö—Å—è —É–≥–ª–µ–π
      if (positions[i * 3 + 1] > 5) {
        const angle = Math.random() * Math.PI * 2;
        const radius = 3 + Math.random() * 4;
        positions[i * 3] = Math.cos(angle) * radius;
        positions[i * 3 + 1] = -2;
        positions[i * 3 + 2] = Math.sin(angle) * radius;
      }
    }

    this.embers.geometry.attributes.position.needsUpdate = true;
    this.embers.geometry.attributes.size.needsUpdate = true;
  }

  // ‚ú® –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –∑–≤—ë–∑–¥–Ω–æ–π –ø—ã–ª–∏
  _updateStarDust(dt) {
    if (!this.starDust) return;
    this.starDust.rotation.y += dt * 0.02;
    this.starDust.rotation.x += dt * 0.005;
  }

  _updatePhysics(dt) {
    const count = this.segmentCount;
    
    // üåÄ –û–ë–†–ê–ë–û–¢–ö–ê –°–û–ë–´–¢–ò–ô –•–ê–û–°–ê
    if (this.chaosMode && this.chaosEvents && Array.isArray(this.chaosEvents) && this.chaosEvents.length > 0 && this.isSpinning) {
      if (!this.chaosStartTime) {
        this.chaosStartTime = Date.now();
      }
      
      const elapsed = Date.now() - this.chaosStartTime;
      
      // üî• –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï –û –ù–ê–ß–ê–õ–ï –•–ê–û–°–ê –Ω–∞ 2.3 —Å–µ–∫—É–Ω–¥–µ
      if (!this.chaosWarningShown && elapsed >= 2300) {
        this.chaosWarningShown = true;
        this._showChaosMessage('üåÄ –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø –•–ê–û–°!!! üåÄ', true);
        this._chaosFlash('mega');
        this._screenShake();
        if (this.audioBus) {
          this.audioBus.speak?.('–ù–ê–ß–ò–ù–ê–ï–¢–°–Ø –•–ê–û–°!');
        }
        console.log('üåÄüåÄüåÄ –§–ê–ó–ê –†–ê–ó–ì–û–ù–ê –ó–ê–í–ï–†–®–ï–ù–ê - –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø –•–ê–û–°!!!');
      }
      
      for (const event of this.chaosEvents) {
        if (!event || typeof event !== 'object') continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        if (!event.executed && elapsed >= event.delay) {
          event.executed = true;
          
          switch(event.type) {
            case 'boost':
              // –í–Ω–µ–∑–∞–ø–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ
              const currentDir = this.physics.vel > 0 ? 1 : -1;
              this.physics.addImpulse(currentDir * event.strength);
              console.log(`üî• BOOST +${event.strength.toFixed(1)}`);
              this._chaosFlash('boost');
              if (this.audioBus) {
                this.audioBus.playWhoosh?.();
              }
              break;
              
            case 'brake':
              // –†–µ–∑–∫–æ–µ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ
              this.physics.vel *= event.strength;
              console.log(`üõë BRAKE x${event.strength.toFixed(2)}`);
              this._chaosFlash('brake');
              break;
              
            case 'reverse':
              // –°–º–µ–Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
              this.physics.vel = -this.physics.vel * event.strength;
              console.log(`üîÑ REVERSE`);
              this._chaosFlash('reverse');
              if (this.audioBus) {
                this.audioBus.playMetalCling?.(0.8);
              }
              break;
              
            case 'pause':
              // –ü–∞—É–∑–∞
              this.chaosPauseEnd = Date.now() + event.duration;
              this.chaosPausedVelocity = this.physics.vel;
              this.physics.vel = 0;
              console.log(`‚è∏Ô∏è PAUSE ${event.duration}–º—Å`);
              this._chaosFlash('pause');
              break;
              
            case 'mega-boost':
              // üî• –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û–ï –£–°–ö–û–†–ï–ù–ò–ï
              const megaDir = this.physics.vel > 0 ? 1 : -1;
              this.physics.addImpulse(megaDir * event.strength);
              console.log(`üí•üí•üí• MEGA-BOOST +${event.strength.toFixed(1)}!!!`);
              this._chaosFlash('mega');
              if (this.audioBus) {
                this.audioBus.playMetalCling?.(1.5);
                this.audioBus.playWhoosh?.();
              }
              this._screenShake();
              break;
              
            case 'double-reverse':
              // üí• –î–í–û–ô–ù–û–ô –†–ï–í–ï–†–°
              this.physics.vel = -this.physics.vel * event.strength;
              console.log(`üí• DOUBLE-REVERSE!`);
              setTimeout(() => {
                if (this.isSpinning) {
                  this.physics.vel = -this.physics.vel * 0.8;
                  console.log(`üí•üí• DOUBLE-REVERSE - COMPLETE!!!`);
                  this._chaosFlash('reverse');
                }
              }, 150);
              this._chaosFlash('reverse');
              if (this.audioBus) {
                this.audioBus.playMetalCling?.(1.2);
              }
              break;
              
            case 'hurricane':
              // üå™Ô∏è –£–†–ê–ì–ê–ù–ù–û–ï –í–†–ê–©–ï–ù–ò–ï
              const hurricaneDir = this._randomFloat() < 0.5 ? 1 : -1;
              this.physics.addImpulse(hurricaneDir * event.strength);
              console.log(`üå™Ô∏èüå™Ô∏èüå™Ô∏è HURRICANE ${event.strength.toFixed(1)}!!!`);
              this._chaosFlash('mega');
              this._chaosFlash('boost');
              this._screenShake();
              this._screenShake();
              if (this.audioBus) {
                this.audioBus.playMetalCling?.(2.0);
                this.audioBus.playWind?.(50);
              }
              if ('vibrate' in navigator) {
                navigator.vibrate([100, 50, 100, 50, 200]);
              }
              break;
          }
        }
      }
      
      // –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–∞—É–∑—ã
      if (this.chaosPauseEnd && Date.now() >= this.chaosPauseEnd) {
        this.physics.vel = this.chaosPausedVelocity;
        this.chaosPauseEnd = null;
        this.chaosPausedVelocity = 0;
        console.log('üåÄ –•–ê–û–°: –ü–∞—É–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      }
    }
    
    if (count <= 1) {
      this.physics.step(dt);
      this.root.rotation.z = this.physics.angle;
      
      if (Math.abs(this.physics.vel) < 0.01 && this.isSpinning) {
        const label = this.labels.length ? this.labels[0] : "–í–∞—Ä–∏–∞–Ω—Ç 1";
        this._highlightSector(0);
        this._showVictoryModal(label);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        this.pendingEliminationLabel = label;
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º —Ö–∞–æ—Å–∞
        this.chaosMode = false;
        this.chaosEvents = null;
        this.chaosStartTime = null;
        
        // üåÄ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤—É–∫ —Ö–∞–æ—Å–∞
        if (this.audioBus) {
          this.audioBus.stopChaosSound();
        }
        
        if (this.onResult) this.onResult(label);
        this.isSpinning = false;
        this.activeIndex = 0;
        
        // üé≠ –î—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–≤—É–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        if (this.audioBus) {
          this.audioBus.playDramaticStop();
        }
        
        // üî• –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–≥–Ω–µ–Ω–Ω—ã–π —à–ª–µ–π—Ñ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–µ—Ç—É
        if (this.fireTrail) {
          this.fireTrail.stop();
        }
        if (this.comet) {
          this.comet.trigger();
        }
      }
      return;
    }
    
    const segmentAngle = TAU / count;
    const prevAngle = this.physics.angle;
    
    this.physics.step(dt);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –∑—É–±—Ü–∞–º–∏ (–¥–µ—Ñ–ª–µ–∫—Ç–æ—Ä–∞–º–∏)
    if (Math.abs(this.physics.vel) > 0.01 && this.physics.toothCooldown <= 0) {
      const currentAngle = this.physics.angle;
      const prevNorm = ((prevAngle % TAU) + TAU) % TAU;
      const currNorm = ((currentAngle % TAU) + TAU) % TAU;
      const pointerPos = Math.PI / 2;
      
      for (let i = 0; i < count; i++) {
        const toothStaticAngle = (this.anchorOffset + (i + 1) * segmentAngle) % TAU;
        const prevToothWorldAngle = (toothStaticAngle + prevNorm) % TAU;
        const currToothWorldAngle = (toothStaticAngle + currNorm) % TAU;
        
        let crossed = false;
        
        if (this.physics.vel > 0) {
          crossed = (prevToothWorldAngle < pointerPos && currToothWorldAngle >= pointerPos);
        } else {
          crossed = (prevToothWorldAngle > pointerPos && currToothWorldAngle <= pointerPos);
        }
        
        if (crossed && this.physics.lastToothHit !== i) {
          const velocity = Math.abs(this.physics.vel);
          const dampingMultiplier = count <= 2 ? 2.5 : count <= 3 ? 2.0 : count <= 5 ? 1.5 : 1.0;
          
          // üéØ –ù–û–í–ê–Ø –§–ò–ó–ò–ö–ê –ó–£–ë–¶–û–í - –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–µ—Ñ–ª–µ–∫—Ç–æ—Ä—ã
          
          if (velocity > 8) {
            // –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å - –°–õ–ê–ë–û–ï –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ (–∑—É–±–µ—Ü –ø—Ä–æ—Å—Ç–æ —Å–∫–æ–ª—å–∑–∏—Ç)
            this.physics.vel *= (1 - (0.04 + this._randomFloat() * 0.02) * dampingMultiplier);
            this._bouncePointer();
            if (this.onHit) this.onHit(0.9);
            
          } else if (velocity > 4) {
            // –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å - –£–ú–ï–†–ï–ù–ù–û–ï –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ
            this.physics.vel *= (1 - (0.08 + this._randomFloat() * 0.04) * dampingMultiplier);
            this._bouncePointer();
            if (this.onHit) this.onHit(0.7);
            
          } else if (velocity > 2) {
            // –ù–∏–∑–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å - –ó–ê–ú–ï–¢–ù–û–ï –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ
            this.physics.vel *= (1 - (0.12 + this._randomFloat() * 0.05) * dampingMultiplier);
            this._bouncePointer();
            if (this.onHit) this.onHit(0.5);
            
          } else if (velocity > 0.8) {
            // –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å - –°–ò–õ–¨–ù–û–ï –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ
            this.physics.vel *= (1 - (0.18 + this._randomFloat() * 0.08) * dampingMultiplier);
            this._bouncePointer();
            if (this.onHit) this.onHit(0.3);
            
          } else if (velocity > 0.3) {
            // üé≤ –î–†–ê–ú–ê –ù–ê –§–ò–ù–ò–®–ï - –º–∞–ª—ã–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
            const drama = this._randomFloat();
            
            if (drama < 0.15) {
              // 15% —à–∞–Ω—Å - –ª—ë–≥–∫–∏–π –¢–û–õ–ß–û–ö –í–ü–ï–†–Å–î (–∑—É–±–µ—Ü –ø–æ–¥—Ç–∞–ª–∫–∏–≤–∞–µ—Ç!)
              const pushForce = 0.2 + this._randomFloat() * 0.15;
              this.physics.vel += (this.physics.vel > 0 ? 1 : -1) * pushForce;
              this._bouncePointer();
              if (this.onHit) this.onHit(0.25);
              
            } else if (drama < 0.30) {
              // 15% —à–∞–Ω—Å - –û–¢–°–ö–û–ö –ù–ê–ó–ê–î (–∑—É–±–µ—Ü –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ—Ç!)
              const bounceStrength = 0.25 + this._randomFloat() * 0.2;
              this.physics.vel = -this.physics.vel * bounceStrength;
              this._bouncePointer();
              if (this.onHit) this.onHit(0.2);
              
            } else {
              // 70% —à–∞–Ω—Å - –æ–±—ã—á–Ω–æ–µ –ó–ê–ú–ï–î–õ–ï–ù–ò–ï
              this.physics.vel *= (1 - (0.25 + this._randomFloat() * 0.12) * dampingMultiplier);
              this._bouncePointer();
              if (this.onHit) this.onHit(0.2);
            }
            
          } else {
            // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ú–ê–õ–ê–Ø –°–ö–û–†–û–°–¢–¨ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥—Ä–∞–º–∞!
            const criticalDrama = this._randomFloat();
            
            if (criticalDrama < 0.10) {
              // 10% —à–∞–Ω—Å - –ß–£–î–û! –ó—É–±–µ—Ü –¥–∞—ë—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–º–ø—É–ª—å—Å
              const miraclePush = 0.3 + this._randomFloat() * 0.2;
              this.physics.vel += (this.physics.vel > 0 ? 1 : -1) * miraclePush;
              if (this.onHit) this.onHit(0.15);
              
            } else if (criticalDrama < 0.25) {
              // 15% —à–∞–Ω—Å - –æ—Ç—Å–∫–æ–∫ –Ω–∞–∑–∞–¥ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∏–∑–¥—ã—Ö–∞–Ω–∏–∏
              const weakBounce = 0.15 + this._randomFloat() * 0.1;
              this.physics.vel = -this.physics.vel * weakBounce;
              if (this.onHit) this.onHit(0.1);
              
            } else {
              // 75% —à–∞–Ω—Å - –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ –¥–æ –ø–æ—á—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
              this.physics.vel *= (1 - (0.35 + this._randomFloat() * 0.15) * dampingMultiplier);
              if (this.onHit) this.onHit(0.1);
            }
          }
          
          this.physics.lastToothHit = i;
          this.physics.toothCooldown = 0.08;
          break;
        }
      }
    }
    
    if (this.physics.toothCooldown <= 0) {
      this.physics.lastToothHit = -1;
    }

    this.root.rotation.z = this.physics.angle;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    if (Math.abs(this.physics.vel) < 0.01 && this.isSpinning) {
      const idx = this._indexFromAngle(this.physics.angle);
      const label = this.labels[idx] || `–í–∞—Ä–∏–∞–Ω—Ç ${idx + 1}`;
      
      this._highlightSector(idx);
      this._showVictoryModal(label);
      
      // ‚úÖ –í–ò–ë–†–ê–¶–ò–Ø –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      this._triggerHapticFeedback();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
      this.pendingEliminationLabel = label;
      
      if (this.onResult) this.onResult(label);
      this.isSpinning = false;
      this.activeIndex = idx;
      
      // üåÄ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤—É–∫ —Ö–∞–æ—Å–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–ª–µ—Å–∞
      if (this.audioBus) {
        this.audioBus.stopChaosSound();
      }
      
      // ÔøΩ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º —Ö–∞–æ—Å–∞
      this.chaosMode = false;
      this.chaosEvents = null;
      this.chaosStartTime = null;
      this.chaosPauseEnd = null;
      this.chaosPausedVelocity = 0;
      
      // ÔøΩüé≠ –î—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–≤—É–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
      if (this.audioBus) {
        this.audioBus.playDramaticStop();
      }
      
      // üî• –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–≥–Ω–µ–Ω–Ω—ã–π —à–ª–µ–π—Ñ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–µ—Ç—É
      if (this.fireTrail) {
        this.fireTrail.stop();
      }
      if (this.comet) {
        this.comet.trigger();
      }
    }
  }

  // ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –°–í–ê–ô–ü–û–í –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
  _setupSwipeHandlers() {
    if (!this.container) return;

    this.container.addEventListener('touchstart', (e) => {
      if (this.isSpinning || this.segmentCount < 2) return;
      
      const touch = e.touches[0];
      this.touchStartX = touch.clientX;
      this.touchStartY = touch.clientY;
      this.touchStartTime = Date.now();
    }, { passive: true });

    this.container.addEventListener('touchend', (e) => {
      if (this.isSpinning || this.segmentCount < 2) return;
      
      const touch = e.changedTouches[0];
      const deltaX = touch.clientX - this.touchStartX;
      const deltaY = touch.clientY - this.touchStartY;
      const deltaTime = Date.now() - this.touchStartTime;
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–∞–π–ø–∞ (–º–∏–Ω–∏–º—É–º 50px, –º–∞–∫—Å–∏–º—É–º 500ms)
      if (Math.abs(deltaX) > 50 && deltaTime < 500 && Math.abs(deltaY) < 100) {
        const velocity = Math.abs(deltaX) / deltaTime;
        const strength = Math.min(2, velocity * 2);
        
        // –ó–∞–ø—É—Å–∫ –≤—Ä–∞—â–µ–Ω–∏—è
        this.spin(strength);
      }
    }, { passive: true });
  }

  // ‚úÖ –í–ò–ë–†–ê–¶–ò–Ø –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  _triggerHapticFeedback() {
    if ('vibrate' in navigator) {
      // –ü–∞—Ç—Ç–µ—Ä–Ω: –∫–æ—Ä–æ—Ç–∫–∞—è - –ø–∞—É–∑–∞ - –¥–ª–∏–Ω–Ω–∞—è - –ø–∞—É–∑–∞ - –∫–æ—Ä–æ—Ç–∫–∞—è
      navigator.vibrate([50, 30, 100, 30, 50]);
    }
  }
  
  // üî• –í–ò–ó–£–ê–õ–¨–ù–ê–Ø –í–°–ü–´–®–ö–ê –ø—Ä–∏ —Å–æ–±—ã—Ç–∏–∏ —Ö–∞–æ—Å–∞
  _chaosFlash(type) {
    const overlay = document.createElement('div');
    overlay.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      pointer-events: none;
      z-index: 9999;
      animation: chaosFlash 0.2s ease-out;
    `;
    
    // –†–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
    const colors = {
      'boost': 'radial-gradient(circle, rgba(255, 100, 0, 0.6) 0%, rgba(255, 50, 0, 0.3) 50%, transparent 100%)',
      'brake': 'radial-gradient(circle, rgba(200, 0, 0, 0.7) 0%, rgba(150, 0, 0, 0.4) 50%, transparent 100%)',
      'reverse': 'radial-gradient(circle, rgba(150, 0, 255, 0.6) 0%, rgba(100, 0, 200, 0.4) 50%, transparent 100%)',
      'pause': 'radial-gradient(circle, rgba(0, 0, 0, 0.8) 0%, rgba(50, 0, 50, 0.5) 50%, transparent 100%)',
      'mega': 'radial-gradient(circle, rgba(255, 255, 255, 0.9) 0%, rgba(255, 200, 0, 0.6) 30%, rgba(255, 0, 0, 0.4) 60%, transparent 100%)'
    };
    
    overlay.style.background = colors[type] || colors['boost'];
    
    // üî• –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ü–≤–µ—Ç–Ω—ã–µ –ø–æ–ª–æ—Å—ã –¥–ª—è –±–æ–ª—å—à–µ–≥–æ —Ö–∞–æ—Å–∞
    if (Math.random() < 0.3) {
      const strips = document.createElement('div');
      strips.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        pointer-events: none;
        z-index: 9998;
        background: repeating-linear-gradient(
          ${Math.random() * 180}deg,
          transparent,
          transparent 10px,
          rgba(255, 0, 0, 0.3) 10px,
          rgba(255, 0, 0, 0.3) 20px
        );
        animation: chaosFlash 0.2s ease-out;
      `;
      document.body.appendChild(strips);
      setTimeout(() => strips.remove(), 200);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!document.getElementById('chaos-flash-style')) {
      const style = document.createElement('style');
      style.id = 'chaos-flash-style';
      style.textContent = `
        @keyframes chaosFlash {
          0% { opacity: 1; }
          100% { opacity: 0; }
        }
        @keyframes chaosShake {
          0%, 100% { transform: translate(0, 0) rotate(0deg); }
          10% { transform: translate(-20px, -15px) rotate(-3deg) scale(1.02); }
          20% { transform: translate(15px, 20px) rotate(4deg) scale(0.98); }
          30% { transform: translate(-18px, 12px) rotate(-2deg) scale(1.01); }
          40% { transform: translate(22px, -18px) rotate(3deg) scale(0.99); }
          50% { transform: translate(-15px, 5px) rotate(-4deg) scale(1.02); }
          60% { transform: translate(18px, -8px) rotate(3deg) scale(0.98); }
          70% { transform: translate(-12px, -20px) rotate(-2deg) scale(1.01); }
          80% { transform: translate(10px, 15px) rotate(2deg) scale(0.99); }
          90% { transform: translate(-8px, -5px) rotate(-1deg) scale(1.0); }
        }
      `;
      document.head.appendChild(style);
    }
    
    document.body.appendChild(overlay);
    setTimeout(() => overlay.remove(), 200);
  }
  
  // üî• –¢–†–Ø–°–ö–ê –≠–ö–†–ê–ù–ê
  _screenShake() {
    const container = this.container;
    if (!container) return;
    
    const intensity = Math.random() * 0.5 + 0.5; // 0.5-1.0
    container.style.animation = `chaosShake 0.3s ease-in-out ${intensity}`;
    setTimeout(() => {
      container.style.animation = '';
    }, 300);
    
    // üî• –°–ª—É—á–∞–π–Ω–∞—è –∏–Ω–≤–µ—Ä—Å–∏—è —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ö–∞–æ—Å–∞
    if (Math.random() < 0.15) {
      document.body.style.filter = 'invert(1) hue-rotate(180deg)';
      setTimeout(() => {
        document.body.style.filter = '';
      }, 100);
    }
  }
  
  // üòà –î–ï–ú–û–ù–ò–ß–ï–°–ö–ò–ï –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò
  _getChaosComment(type) {
    const comments = {
      'boost': [
        '–î–ï–ú–û–ù–´ –£–°–ö–û–†–Ø–Æ–¢ –ö–û–õ–ï–°–û!',
        '–ü–õ–ê–ú–Ø –ê–î–ê –¢–û–õ–ö–ê–ï–¢ –°–£–î–¨–ë–£!',
        '–ê–î–°–ö–ê–Ø –≠–ù–ï–†–ì–ò–Ø!',
        '–°–ò–õ–´ –¢–¨–ú–´ –í–ú–ï–®–ò–í–ê–Æ–¢–°–Ø!',
        '–ü–†–ï–ò–°–ü–û–î–ù–Ø–Ø –î–ê–†–£–ï–¢ –°–ö–û–†–û–°–¢–¨!',
        '–ò–ù–§–ï–†–ù–ê–õ–¨–ù–´–ô –ò–ú–ü–£–õ–¨–°!',
        '–ë–ï–°–´ –†–ê–°–ö–†–£–ß–ò–í–ê–Æ–¢ –ú–ï–•–ê–ù–ò–ó–ú!'
      ],
      'brake': [
        '–î–ï–ú–û–ù–´ –ó–ê–ú–ï–î–õ–Ø–Æ–¢ –•–û–î!',
        '–¢–Å–ú–ù–´–ï –°–ò–õ–´ –¢–û–†–ú–û–ó–Ø–¢!',
        '–°–£–î–¨–ë–ê –°–û–ü–†–û–¢–ò–í–õ–Ø–ï–¢–°–Ø!',
        '–ü–†–û–ö–õ–Ø–¢–¨–ï –ó–ê–ú–ï–î–õ–ï–ù–ò–Ø!',
        '–ü–†–ï–ì–†–ê–î–ê –ò–ó –¢–ï–ù–ï–ô!',
        '–ê–î–°–ö–ê–Ø –¢–Ø–ñ–ï–°–¢–¨!',
        '–¶–ï–ü–ò –ü–†–ï–ò–°–ü–û–î–ù–ï–ô!'
      ],
      'reverse': [
        '–†–ï–í–ï–†–°! –°–ú–ï–ù–ê –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø!',
        '–û–ë–†–ê–¢–ù–´–ô –•–û–î –°–£–î–¨–ë–´!',
        '–î–ï–ú–û–ù–´ –†–ê–ó–í–ï–†–ù–£–õ–ò –ö–û–õ–ï–°–û!',
        '–í–°–ü–Ø–¢–¨, –ú–ï–•–ê–ù–ò–ó–ú –ê–î–ê!',
        '–°–ò–õ–´ –•–ê–û–°–ê –ú–ï–ù–Ø–Æ–¢ –ü–£–¢–¨!',
        '–ò–ù–§–ï–†–ù–ê–õ–¨–ù–´–ô –†–ê–ó–í–û–†–û–¢!',
        '–ö–û–õ–ï–°–û –ü–û–í–ï–†–ù–£–õ–û –í–°–ü–Ø–¢–¨!'
      ],
      'pause': [
        '–í–†–ï–ú–Ø –ó–ê–ú–ï–†–õ–û!',
        '–û–°–¢–ê–ù–û–í–ö–ê –°–£–î–¨–ë–´!',
        '–î–ï–ú–û–ù–´ –ó–ê–ú–û–†–û–ó–ò–õ–ò –ú–ò–ì!',
        '–ó–ê–¢–ò–®–¨–ï –ü–ï–†–ï–î –ë–£–†–ï–ô!',
        '–ü–†–ï–ò–°–ü–û–î–ù–Ø–Ø –†–ê–ó–î–£–ú–´–í–ê–ï–¢!',
        '–ü–ê–£–ó–ê –•–ê–û–°–ê!',
        '–¢–¨–ú–ê –ú–ï–î–õ–ò–¢!'
      ],
      'mega': [
        '–ú–û–©–¨ –ü–†–ï–ò–°–ü–û–î–ù–ï–ô!!!',
        '–ê–î–°–ö–ò–ô –í–ò–•–†–¨ –°–ò–õ–´!!!',
        '–≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–ê–Ø –≠–ù–ï–†–ì–ò–Ø –ê–î–ê!!!',
        '–ò–ù–§–ï–†–ù–ê–õ–¨–ù–´–ô –í–ó–†–´–í!!!',
        '–î–ï–ú–û–ù–ò–ß–ï–°–ö–ò–ô –ò–ú–ü–£–õ–¨–°!!!',
        '–°–ò–õ–ê –¢–´–°–Ø–ß–ò –î–ï–ú–û–ù–û–í!!!',
        '–£–†–ê–ì–ê–ù –ü–†–ï–ò–°–ü–û–î–ù–ï–ô!!!'
      ],
      'double': [
        '–î–í–û–ô–ù–û–ô –†–ï–í–ï–†–° –°–£–î–¨–ë–´!',
        '–•–ê–û–° –†–ê–ó–í–û–†–ê–ß–ò–í–ê–ï–¢ –î–í–ê–ñ–î–´!',
        '–î–ï–ú–û–ù–´ –ò–ì–†–ê–Æ–¢ –° –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï–ú!',
        '–û–ë–†–ê–¢–ù–û –ò –°–ù–û–í–ê –û–ë–†–ê–¢–ù–û!',
        '–î–í–û–ô–ù–ê–Ø –°–ú–ï–ù–ê –ü–£–¢–ò!',
        '–ò–ù–§–ï–†–ù–ê–õ–¨–ù–´–ô –¢–í–ò–°–¢!',
        '–°–£–î–¨–ë–ê –ù–ï –û–ü–†–ï–î–ï–õ–ò–õ–ê–°–¨!'
      ],
      'hurricane': [
        '–£–†–ê–ì–ê–ù –•–ê–û–°–ê!!!',
        '–î–ï–ú–û–ù–ò–ß–ï–°–ö–ò–ô –°–ú–ï–†–ß!!!',
        '–í–ò–•–†–¨ –ü–†–ï–ò–°–ü–û–î–ù–ï–ô!!!',
        '–¢–û–†–ù–ê–î–û –°–£–î–¨–ë–´!!!',
        '–ê–î–°–ö–ò–ô –¶–ò–ö–õ–û–ù!!!',
        '–ë–£–†–Ø –ü–†–û–ö–õ–Ø–¢–ò–ô!!!',
        '–í–†–ê–©–ï–ù–ò–ï –ë–ï–ó–£–ú–ò–Ø!!!'
      ]
    };
    
    const list = comments[type] || comments['boost'];
    return list[Math.floor(Math.random() * list.length)];
  }
  
  // üòà –ü–û–ö–ê–ó –°–û–û–ë–©–ï–ù–ò–Ø –ù–ê –≠–ö–†–ê–ù–ï
  _showChaosMessage(text, big = false) {
    const msg = document.createElement('div');
    msg.textContent = text;
    msg.style.cssText = `
      position: fixed;
      top: ${big ? '25%' : '15%'};
      left: 50%;
      transform: translateX(-50%);
      font-family: 'Cinzel', serif;
      font-size: ${big ? '52px' : '36px'};
      font-weight: 700;
      color: #ff3300;
      text-shadow: 
        0 0 20px rgba(255, 0, 0, 0.9),
        0 0 40px rgba(255, 100, 0, 0.7),
        0 0 60px rgba(255, 0, 0, 0.5),
        3px 3px 10px rgba(0, 0, 0, 0.9);
      pointer-events: none;
      z-index: 10000;
      animation: chaosMessage 2s ease-out;
      text-align: center;
      max-width: 90%;
      letter-spacing: 0.15em;
      text-transform: uppercase;
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!document.getElementById('chaos-message-style')) {
      const style = document.createElement('style');
      style.id = 'chaos-message-style';
      style.textContent = `
        @keyframes chaosMessage {
          0% { 
            opacity: 0; 
            transform: translateX(-50%) scale(0.5) rotate(-10deg);
          }
          15% { 
            opacity: 1; 
            transform: translateX(-50%) scale(1.3) rotate(5deg);
          }
          30% { 
            transform: translateX(-50%) scale(0.95) rotate(-3deg);
          }
          45% { 
            transform: translateX(-50%) scale(1.08) rotate(2deg);
          }
          65% { 
            opacity: 1;
            transform: translateX(-50%) scale(1) rotate(0deg);
          }
          85% {
            opacity: 0.8;
            transform: translateX(-50%) scale(1) rotate(0deg);
          }
          100% { 
            opacity: 0; 
            transform: translateX(-50%) scale(0.7) translateY(-80px);
          }
        }
      `;
      document.head.appendChild(style);
    }
    
    document.body.appendChild(msg);
    setTimeout(() => msg.remove(), 2000);
  }
}


if (typeof window !== 'undefined') {
  window.HellWheel3D = HellWheel3D;
}
